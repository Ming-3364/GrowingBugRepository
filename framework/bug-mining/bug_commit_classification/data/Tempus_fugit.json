{"number": ["d2dd0cebf2b372292009869267a02aff5db69e6b", "4a6837481457984d397ed95d247f8030182c18f1", "5765b35db7ab3f3e634d0f7a3ad745d85775c1a5", "3ee14aa9ca4be8fd070a7d5eeda0a79959950eeb", "be3a5b1c8f0be192238fdb5ea8ca5f5fa2bb1973", "4a2181972f6c1e57595e78875464fd2cce5d3f8b", "2d02dca0bd0bc7d936f77ba39559b341337afb68", "39a2928d11f5cb3d2b00bd2cc385e7cd53b1b7c7", "7eafba2cd6a81401eea82a10df05035173062cc5", "807b3aea5c9e66888ba5612292cdd4d88830bb49", "89122b5a4c47b3499436e098b728fac8c8261547", "8541f87b758625244d5b1dfa3ce2c86098ed8bb2", "00db8e70a207f10c17edc5ceb38d3c5c88bb1a32", "6a554c6a821bf3614e1d376f180a2ba5edba1e9b", "2fb84611a99d9a268fcde46d3e3934069815bae5", "79912ca08f5cc081b7d290f9ba88dea6eb21fb67", "345fe179dd71663180186bf4075226b9e8c7a47e"], "father_version": ["690339611e13fe9fe9e00a3741bf6ca2cc5eef69", "049d412e4d691e7ed32e7ca4303c3c58396098a8", "092f04ad29a1f70846f296af5fd6908d50a59d2a", "2d573153b69b353c2363e487c86f12cf7153aabd", "3ac91db3e8b900e53f0863286d151bb754e83acc", "185c1ec9601e394f27cafa53a465de1da597eaf2", "39a2928d11f5cb3d2b00bd2cc385e7cd53b1b7c7", "77d97a07468fc5f00c6fb7c7fac1a0e3429c39fc", "807b3aea5c9e66888ba5612292cdd4d88830bb49", "89122b5a4c47b3499436e098b728fac8c8261547", "8541f87b758625244d5b1dfa3ce2c86098ed8bb2", "1a7e006aeb94602d8d84dec7eb6dcd8fa7f3110a", "908eb4b4e93af3f89c92483db95367a013833632", "aab1868a215c7f3086a2e04d0935a0e60f519f84", "89c0c75b56f5b79c8cd671ad321e860b251fc87a", "58ac58d6ce16452f2c9d47a5829fb8e579903600", "89c90f81cc037cc87f10539b5258b92df89d0126"], "commit": ["Fix compareTo() method - see https://github.com/tobyweston/tempus-fugit/issues/13", "#6 renaming default implementation of StopWatch to Timer. Fixing up tests.", "removing exception that would get thrown if the executor used in the ConcurrentScheduler gets interrupted. JUnit itself or the test runner may interrupt this and it's unlikely to be an error. Could replace it with a warning?", "fixed broken RepeatnigRuleTest", "fixing DefaultTimeoutableCompletionServiceTest, becuase (indirectly) the mockery's Synchroniser is used by two different threads and one thread calls Sleep(forever), overall progress can not be made. Fixed by using a stub instead of a mock for the Clock", "fix for bug #12", "fixing test, the ConcurrentTestRunner uses a cached thread pool so its possible that if quick enough, the test will reuse a particular thread and so fail the assertion that each test method must run on its own thread. They do run in seperate threads from the main thread but may not all be unique within the context of the test.", "fixing test", "fix for bug #7 (see http://code.google.com/p/tempus-fugit/issues/detail?id=7)", "fix to bug #8 on trunk", "rename for Bug #10 test", "test for Bug #10", "bug #4, making InterruptCapturingThread non-final", "fixing test, my bad", "toby - more documentation, fixing typos", "toby - fixing failing tests, it was a side effect of reseting the interrupt flag on the current (test) thread when a subsequent test is asked to sleep (the sleep immediatly wakes becuase the flag is already set). Also spotted that the interrupt flag is set back to false on Thread.State.TERMINATION, so introduced a stubbed thread (InterruptedIndicatingThread) to set a flag (that isn't reset) if interrupt is called on it. Fixed a spelling mistake (Interruptable to Interruptible) Today was a good day!", "toby - bug #2 (http://code.google.com/p/tempus-fugit/issues/detail?id=2), updated Intermittent to use a Rule (as in JUnit 4.7 instead of a test runner). This does mean that clients of tempus-fugit will have to use 4.7 (4.5 uses yet another mechanism)"], "metric": [["1", "1", "1", "1", "1", "1", "8", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "0", "0", "1"], ["4", "5", "7", "7", "4", "14", "64", "24", "0", "0", "0", "0", "0", "0", "4", "14", "0", "5", "0", "0", "4", "11", "0", "-5"], ["1", "2", "6", "4", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "1", "1", "0", "1"], ["0", "0", "0", "0", "1", "2", "3", "3", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "9", "44", "38", "0", "0", "0", "0", "0", "0", "1", "1", "0", "9", "0", "0", "0", "0", "0", "0"], ["1", "2", "5", "1", "1", "4", "25", "2", "2", "3", "13", "13", "0", "0", "1", "4", "0", "0", "0", "0", "1", "1", "0", "0"], ["0", "0", "0", "0", "1", "3", "20", "6", "0", "0", "0", "0", "0", "0", "1", "1", "0", "6", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "2", "2", "2", "0", "0", "0", "0", "0", "0", "1", "0", "0", "2", "0", "0", "0", "0", "0", "0"], ["1", "1", "31", "0", "3", "3", "62", "25", "0", "0", "0", "0", "1", "0", "2", "5", "3", "1", "1", "0", "0", "3", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "2", "3", "4", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "1", "3", "0", "-3", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "1", "34", "0", "0", "0", "0", "0", "1", "0", "0", "3", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "1", "1", "1", "0", "0", "0", "0", "1", "1", "5", "1", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["0", "0", "0", "0", "1", "3", "3", "4", "2", "9", "39", "23", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["2", "4", "7", "6", "2", "3", "6", "5", "3", "20", "90", "71", "0", "0", "2", "1", "1", "0", "0", "0", "2", "1", "1", "1"], ["3", "4", "7", "7", "3", "6", "46", "38", "0", "0", "0", "0", "1", "0", "2", "4", "2", "4", "0", "0", "3", "0", "0", "3"], ["2", "3", "27", "2", "3", "4", "66", "45", "3", "7", "38", "27", "1", "1", "1", "8", "4", "-3", "1", "0", "1", "2", "0", "0"]]}