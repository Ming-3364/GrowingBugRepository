{"number": ["53cad21ceebb3d721299ee0cb0f11573f5cabc04", "26f073f8371577da8237631767ad127c41bbb462", "e298d78acf735ae92a2354c9e04cccc685634250", "8696de194c1164fcf4845de637c72427bf45e85b", "a561dfe002a0c4e55b684d829b0c99ab9454336f", "ee741ded1ad3b3378fc661d97436e1372d21185d", "80d19bd441187e3a9f7b65272d2f10b7858a3d7a", "59ec5e659f08b11b2adfc297bb99a555ca27aa46", "c9d881c6fcf052f291caf8db118435b87335cf42", "4fa79ccb5f9ac6dc79c3c6830b03a49a7f1f0fa2", "689c8d49c43452327e8369f8dcc76df7854ce817", "6b25c2184ded8cf6cfad72e53141311963b4fc39", "8f17e4c4b1065dde6ff699b1f172c8feca8acf62", "ad8add1a686491a6222a88731ceaa65978c12b07", "09d3d20bb5a8e2bbe7c00a43bd3a95b27e576b46", "e234a84b334957a6bc5e42b3c3e77c4fdbe12c42", "60a80ba6af85b1d00648d4c449a0f8830ccacbbb", "d22cc63a8bf4c7546027ffe1470b179ed9f32b79", "40f3039a66b58cccafd6d1ec1343be3c9023864b", "e6bad02ad11ebcd3d08d0d4a479ae6e094082a68", "ef8b4a3fa967365d355b1d14ec8a2b47f1759413", "e3228eaeca3a01fb0c805fad78a47ed9626b6e10", "65600f2e8ba4e905db3b12b7424c6264dbb34427", "97863af8fda6e87250dae9e477f98de62d1ff28b", "f40317ae215863102cf87fe0679ad66f4b19454e", "c6e35e68633050bab97230d496ae1765605c186e", "d9d66ad60b4a09f74b7a9822fb347a1dbedf28f4", "e62e0abd2fbdfd2512c292ef95d4d152a5ca0691", "08f930a190737eca212da08ece6afa8e4287c336", "2f437b5a8276fdd4b4911a86e94ca61d16500180", "10590517e04ee4162a997a2b4864a985aac189cc", "aa7582dd33bf325b698744d0670a40c727a15cce", "e4ab0e7a0d4a1505b8b83104231f35f5e45ccd64", "ecb6032d6398317da0539ce0ac7287989ea7b0e3", "bd7bed2e4df1b4012f4c97f7d09bfc54eca1c12d", "e97d1f085274ee22b2744e278fec79a8ec570061", "2e91aaf51930cd6c3b999edaac55462707cdac7f", "d038570148fdbc0b6eed5d80b3b40f85df269e30", "66c059933d9b9a43a76436e9a8fefc5d57e88863", "37dac1e64194764d54245d31f9d1bc13f9508a61", "79c9d15c14a898e1ae2085f265a5396b190d7017", "78eef202297404a65d4e4745315aa1c0b0efb3a7", "39662804c334d11cd3caecc5d056759fbfd74b1a", "3d4c3ac444e060673a107871b8b80572884b2723", "93fb9c5bbc799c1e565ff9675643430ee5fa2b34", "81134b51642e2001cd5c193698aab809b7fd3f98", "3854a6508a8cc72eda1ae15b08ab3949d1cc778d", "27244baf29edaa94d22e3750a7b5aa71cae22187", "f17d298a901683c0d1b0a05fa093a5936c7abcc5", "93a1477d3e632742360d23df6932f0e0e12961eb", "de9b78de5ac34419469fcd8bd984e362af781bff", "d8e26543dc50d148825baca73991f1456893596e", "3c6dbe52073c71a1aed7aafde809ea58848242e7", "9cf999995c4b95efa521e383325dcf5823aa5978", "5e2a0bd27d3ecdb62c28963f48d53c4ca2d051c7", "c282378149260db3c9d0a1c513eb57c9966a9b10", "044ccda6bf4b6334faa7e87d0238a6e5a910d4a3", "b85dbf6dce242ee95d38a61818158b6044852da5", "46718eb7a68abfe824b5c19f7905e1d78e50c560", "fd6c6fa57f73fcbf3472b66a648648a710f1f050", "6607dd749a8c345e9f6787d55d1e484d40588676", "7a7bd1f16e60305ecb2d9dae901e5e460cf7846a", "99af6e1a50af37739e717924877e4d6ece2d9b3a", "53d1d2add95db44e034b1a4fc7d47fc214957066", "c98b701307d7e271e8bdab0693d15a64a35d7ecc", "259c27224b22813e2940d6e92ddf9c45cebd3108", "4b17885c08595fff09c1e44cbfe637b9c129180d", "5fe00a6e0bd605c57e5a127f0b0378dd33b673b8", "2c035ce5172a6c4d21d859e2609b57358db02f6f", "22a84b18e2fddf05f54dc771d7d5949d0e06e12f", "6a4da28c4a502f7a9743d7bc77a4df4189d65f14", "ed2e8dcebb6c40838fba5d8513e76d992b006066", "2254476c44ce2123a279f9756a771e0a921b814f", "3b091f2f0ae474ec3df124d3cff39a9be1f5d3fb", "86068645b5ddf624640c30272d9a3cf92938f967", "59679d05a8ae6ef7aa3b01011f08b4aea435524f", "e92a6bead67118685a3f2247b7cdb17ee4f2549d", "87b37ee20c016b09379fc6eab66da5251b20b2ad", "436accbf7c7cd77868a4cfde5a6941d822dff00b", "6e95ac2647ee3fe35e33e8d8545e02dea31bc995", "96e3f54c86f9b726c81a90538fb08c7bb9c31917", "a0312eea07ce878725600ab3a1a1b5dd72f90257", "1aa31b74b7fc41f026cfb7ebb935908414c8bfb0", "e1b3233a70825269b709740761a7a8f8bc489243", "3a8aeeffe4e03a72ce8d0caf4b69705b93cfe128", "a4f686c70aaa4cfcdf5a677eed5c200269efa758", "89dcbae7ac7b3b711246263ba5008c2c7d031df9", "27ac6562584d001cfd1868ddbb5dd0090b51f04f", "c15f321c6a58df78a4e3760040d351df07b005bc", "2eef3e7cc1ed6fd5ab57b570ff4586515277e42a", "ec78694db3f27ca373fcc8487e306851d8938e02", "facfc7e62777310282d9be1870e4b00facf692b1", "cc0af54a0ba34e1874cf1f499debc90dfb27c00c", "363d9e5c37a6eaa234a7aef369e5e23b358da01c", "82041d0c72ba103f63579529796e6475b9923643", "88c0485680467905af7ea3951306f828cacf1e33", "f7dd0bf01ea6f74790b42d8d896780dfd0aef1b7", "a88d843828f958783028e6604e1e6ffd116465de", "434b3a4eb5415136a9b05eefcf49c3dfbf71b8d5", "7b7d37194f7753dfbadf826c567ac0a3a95c79cc", "554f65d0a44176c6dbdb85c963035328cc37d261", "9e78da9b630328bc839995efcd7ff677c520f58d", "76b1a74f9f91dfab85a3de3dcfc795643ed2962c", "f4ae3749bb23c35698817dd84c19abadfe68bd07", "de66f2350e1777893c52cb1a1fefd6f57b37b861", "debd32d8f2dcc251975c517f99810e1aed5b2971", "2934a312ed63b85bb56269653c7cf0f45a875016", "acd2efb18f755dc3e7b79ced0838675efb65489b", "b5ebc92569c1aae70a27ffe5bf6f7557045a47cb", "686dd2cb319f32cb04df0c0481316627b296783a", "0f72298d0e26a3feff5ddd0b5d62c3e9839bf2f3", "0ca337f15e9ab2f6523d1b637124233795b31c85", "0b3f7b13bf8c9eac4a0b9835152fd15859258978", "9d4ce9ec8f73a0f7fb59a265e6035b0af6ae8389", "26eaf2feb7cb458a17ace078a9747484571e56a1", "109df3f8f770b33a6dcf1322b76fb3744e0c5bde", "e5a5728e4224c1b705b4775e1bfb50b3092be91b", "9c547c48b68b6f0640ef4c91d0ab6c80038db7f0", "03bfd8e2a2a48a481908cafe37306af3a9debb59", "155c8f086c72a02e9aae9f34ab2abb21a7fbe58a", "b1aca4d116191f27171642b348eb464882194e3f", "2f7ceda4e71d2f0c7b4a8585dc6cfa5c3743dcde", "9c9dc0b7973cadf42086027afc7b47387ebed73f", "3732d6732262dc82d94aa35080ffe68a56c7093e", "e875aa41a20b938d3b5f5a1f767e0c01b87c9d29", "0091f77076aafed54d64ff2159607cb8b098eab6", "160372e57bda7e472e4b9396d813c974a83be8cf", "13320b63b9ab713a3a4144ada3c736396244dc81", "3598e797a4e62304b3c6b7908f7edc5188455355", "a421ca3133ddf727a147e87455a5511444d8d4bb", "cddbcebd42c12d8e81d50c0bef50241d217f4274", "783eff8fed009b34ce3b8ba73a13d090ecd3fc0a", "e0038ccfbaf9b2053e65fa0e9ad0819409eec6d4", "31aa1c3546887ad7ba9d0f65ec418f25de8f3f4f", "258ba28a39ba141c76f477ab3d7b986e9157b171", "d9c32b394694641d891c832912662182de73297e", "8fb5185429bdf7284be82db48c019ecdff5f379a", "6992f634601141e4e1529c8c93aae64c6da5a868", "d402932d749b9a1fe805564421a9e68f37f19b38", "3852e29e9a02671cd5d438836060986149253806", "371e7212f32983b20b044ba6188d28271d788de7", "2c82b8b251edaea68d3060d6f7fd56dcfa4a5e94", "77cf1b9fe960ae3a068aa0c3dabf2fadde138a23", "460be81d3ce8b737428d09166d4a9f64a2969573", "c65e22c10937ef9dde636f28d0a66415fc36eb2c", "9cae2d761d05886914058b1b3aae4caf30eae758", "80c444e0ef33813b1d25c22402b40e269c838562", "c9e380949d1d293ed10310f20329f318869c87a8", "6c9646cd3fca71cec453fb8d9461d2bdb9edec60", "79402cf4b1da1c4fb59c98b4211928f3d675035d", "5fa46c9c70968a74c9d75db4ada769b29a6f3e85", "18268d6c0ab86029b36d93ea69dd256c35fff7c5", "a5d9188e02d60b5860fcf50382f2e6f7556cf401", "db382899a2d729921d3e86d45d5a74237a1aac3f", "0c06a2345f71f053714d37bb6549d3460c999f2d", "133824409e5d74918c10132fbabb93084c6fb2e1", "8f1b6b4777f730cb87eef5a0968083abd10cd0cd", "d85f7443484dc0ac073de16c8396939fd6eb5f9f", "9ba6cd132e34f79e0ab7135876c3605ad33790bf", "cadb638d89266f5d5a3f6cd60928e74fce1acb8c", "83a2574906b5ddca8a0c17d43035825f39c32993", "54504092cad1d62fcca8abab80e174c43bbf17fb", "eb0bafd6c00069fee58f5cb513dc73f1754bd02d", "2438e7241d0a6463ece73d47615fc4968f59370b", "f3682095646b2ba3e61582907963dcbcf1f75e5b", "a43ec16686e3985fcc867a887afd2529bff537e8", "e07c77c16055cd4d751a3668cc990e1d92145554", "399623fe9ee40f9e692d8b31e58c59f0641aecdd", "f0e12ea5feaa0f8fd8c40345238ebda9d2547a6f", "8042eb4fc72f626fffca21b480d460154e7895c5", "0023fb78cb77c8bfb7255c7075342d846ad486a7", "fa7058a07b9c46c1d200d9e9f7727f9c66db42d2", "873852f05f381d5d39b8aabcf6bcb38feb97ef1e", "0147579276a64b7968a8db6c19eb5aafc8bca42d", "67c445966f904ac5eaa463fcbe2652d2cc84cc17", "7e9d636ecf9a7a907d1f84a78e3074a5b1bca73f", "c1d0307fac238108eb34cdb84188cf55351cbf4e", "8512890a4f7ab4d06631c08452d31167549b7d4c", "d3b5e289a4acf9da63c412e50a2b7c5663ec54cd", "1797eea2b559143eaccfde5d875b438fcc9e0558", "05504723b4e217e4067b395c252b6ca0c0decb8e", "afdb3b284d9758219a685239a99c6ef30a2ada4f"], "father_version": ["5aa910225e353dd9a66be036af0961ee21fa5223", "6492ba7763da805cc6e7032dfa476291c401557e", "6acce05eb9f979f44ba57611d22d895130dd79d6", "98b0538389df0ccfd200462be19ba391f8c75488", "160599e767303014fc657a66f3a92bf221340c70", "6dba06c2ffbcc1df165ca9361c45a67defc087f1", "63b5ce5fc627472c8dd2787cbc4bf7a6557a23af", "7ec6b2867f02d0801e7c06221bd9efadd4d59078", "4fa79ccb5f9ac6dc79c3c6830b03a49a7f1f0fa2", "ae4a3d5bff1700156b448e1203c6454967074a28", "6b25c2184ded8cf6cfad72e53141311963b4fc39", "c8a5c198036cd4e138dc3424200f12a4e79b532c", "ad8add1a686491a6222a88731ceaa65978c12b07", "4bdd64b4b4bb350300f42b0d09386ed4ba34366c", "e234a84b334957a6bc5e42b3c3e77c4fdbe12c42", "60a80ba6af85b1d00648d4c449a0f8830ccacbbb", "613a61af88b34d22ffa39b7d47b2a512ac79ab39", "ea0a418bed3a099c989c41f278a6937b1de9f4e2", "51e34531825e64d3627b58de4b1b38e95383d2e9", "ef8b4a3fa967365d355b1d14ec8a2b47f1759413", "31e71a5ce90e482acca9f30dd6335f72ebf913a5", "56f11709ab6b9c39d368630c51f658b3f0970a35", "abf9ad72c07c9b2a35f08ab9c04271b75a4323c7", "f40317ae215863102cf87fe0679ad66f4b19454e", "e41ed19e14d07dc8f2310790165d05da3a73d2bc", "43ff5f2d34e7ac88bd0722281d07303618c85a07", "da84ef1fae38f2d72901c2b95674271e89600f28", "08f930a190737eca212da08ece6afa8e4287c336", "32fdb09b437776951f724930afcc06f19f7e3f33", "b22f969d63d7dc6f2163092637c2ba4c763f00bc", "8e7515a5a796a236a798c299e5338910a4524f3b", "f91d2fef64ffb10c0bf394c56e72b9c55754cf6d", "d9cc1f148b35503875eeb36bfd69b60062b00b8c", "4ab1b53b0ae9a6dbaae3cbc54c270e90fc7daa84", "65087f1953253e1b0d00b4e29b21722b9640a102", "2e91aaf51930cd6c3b999edaac55462707cdac7f", "4a8736f0f75a631c7d8620cf413aaa523307b62a", "628df548685b4fc0f2a9af856f97cc2a68da246b", "75217425361ae9fdfb935d2ec7505224014b01db", "3adcc79d23396d247cc2841eec3506be17955878", "6c2c1a3ff8d2abc74755dfe18c07fa60ee1c7733", "4543619f73dc94cc9a7232f340067e5bfe8ddb24", "eadfe4220b2493b765860fa64b675b6ce197d063", "f89da91c1bb25415ff9cc3fdd70ca833644ecd1b", "e1beeff27a63825fd90e8c800483c346dac4a4df", "91118b0720e585c71731f036da39e9bc9c1077bd", "5724c0db1331698389b2da12d650151d1e605b4a", "9f36c57ff2f87df68730928439b1d8f1cdab8918", "a81a9e253f28ee7480671dde3f2bf53589e19458", "282a3a706a01d1dc3776f618014e7179ddd9bb19", "c16ef662bf69fd997a8f25ad5040d65f10123059", "660337caab27eced4ffdee283118b269a9992696", "8dc495bbf8cb3911d0de6b7a16f9b0937e8c7024", "175e3230b89ca7c535d41f5ccf02f383305c6247", "b6dcc5e7ad8aa4a4debcad0df8f623115d97984e", "044ccda6bf4b6334faa7e87d0238a6e5a910d4a3", "182066019898429d951f06683182c7a5520d5d9e", "af1e5daff849b4762062018b9e8bce1716bfc8b0", "66a57ec20d91b1f542aeb2c6fffa1a89cd593da9", "1a6c9fe31767e23f4daf9de2148735347a572890", "56bff2504424ff81b8ed70727b2252f12bd9134e", "0efda712f3b494e6b2ccfea8fac3364c55b41fa3", "53d1d2add95db44e034b1a4fc7d47fc214957066", "48437ca80dfea8fdba0f3f9ae8fd2d1b992f2a4b", "9a62165669203ffcddc87dc23385a7e0e63c3f44", "39b998770ac586c443d26c4507705e30de791363", "a9ad8e4b83f0339ddf327f6af8dc4020b9a57559", "c9c7f0e66b81a8c90246739fbf3984d0f261ae95", "1f80c1464097439751504ea532ebee6ebcdb105d", "8a5286e2a33ad4d3f3e0a206f7bda045407b19ca", "0a8470b78e9a173775de0f3ab10fba81e3da106f", "326f8f360e54493d1cf24f9fb9a1e40cca4bd90c", "7c7b50a47e7ae4a248bea7a36d7bf049e3453bcd", "12599fdbdad5231c5e16d7db50320a087f3ad2d6", "59679d05a8ae6ef7aa3b01011f08b4aea435524f", "e92a6bead67118685a3f2247b7cdb17ee4f2549d", "416881849b4fa44cea6236f934426ac763ba5537", "46e6d85ef3abb8dd6d20e9b820ecb7022529f26e", "00850e8aa02bb7cf7d7df8f252bb0b05c5b0c53e", "74ecd1a031a29a6d49160e767115fc597702cc5b", "1b8a41d5c91be67416ec6c4bb054b1272c9ba1d9", "3df3be852c308ed68fc81c1e44eb5714aafcf0bf", "d38cacfb1f3b17931904fc64414690c58c09e04c", "b82e45cc05db566d91b95ed5d0a6bca30331b27d", "99492908204775ad5863958804329c2e67b5a207", "52e23358e1cc83819931dd7701c28bc4435986be", "27ac6562584d001cfd1868ddbb5dd0090b51f04f", "32b6e37f52ef31fce1159e8f58180ec54f054724", "7285c1d3d42321b785278678432e4e502a2877fc", "1237ddf864c0c0a19d7d8b3b48b8643dceda7094", "da49ab599269c26cd3bd3e2f3c364142ae08893c", "cc0af54a0ba34e1874cf1f499debc90dfb27c00c", "fe75dbf4d6523ddd3e50e6318096875d36c47959", "449e1f2c0164a18ddb8a3aa724a3d0fff05ed82a", "5ec14eba676427242b1cf8d0a3a29cf8b22a990b", "c64bf47d43c548126ae0f2cd6a21e909641e5d99", "6c1190df4d2af62adc20c06b4a2eaf5480b5bd4a", "0ef134d2cb3fc6b63c119186278e705f4ea94be6", "7b7d37194f7753dfbadf826c567ac0a3a95c79cc", "230a8e697654e285b5218a293b5a74701f5c806d", "d5799084b3fca064aa1409da487e2d2464fcab8f", "ebf4d1d5742bb85bd56bba2062d2aaa0b1fe32f4", "1ce34b6afaa52233599fc6dc080daeb962985a50", "f37401e569e52896e788396803ffa7cb6ba3d47c", "82cd13b839316434fcf5cf7bbea43f747cca8e4b", "1d5ba036dad07508867e1d64a2f02b5f3d1a67d5", "acd2efb18f755dc3e7b79ced0838675efb65489b", "f8801fbe179876a77f11d471ad70305f564eddc1", "317dcc8f449e6699edb804b3418d31c377dac534", "2b01adc79324bcf608a1d5b7bb788732288435a6", "de0a6715492952ca580c26119a930752a68b9553", "037fe1014e413c87bcb714e83a19ffdc34b4f0d8", "a6df0407f41358da1ffb65cb698ba1868dc8a6e5", "4463a7c9657fe6410c5d8d723cac1bfe702ba689", "9868b62d10083cd7f0b507499f84616c69296d51", "29aa5a3f7cf832762144afe3058f696c8eb5b9c3", "9c547c48b68b6f0640ef4c91d0ab6c80038db7f0", "b22f112a4992e2fcde65fbf263a12d9fba9ee883", "b2bd7fa4523a40214f062c38e784b60b82cb2bdb", "81fbc06c5d41a1ec03fcd09e42a4a29e9ddecdab", "2f7ceda4e71d2f0c7b4a8585dc6cfa5c3743dcde", "6634209c4e8ad74edebe46571c1c20c84d7dc7fe", "b069c4c7ca0a2f3420c70b66e1c271e0ec1a0a68", "a4a3008283453d12830bbd08f2f675401d8e352b", "ed0e957d64f86652030312d2f9e652647925ffa0", "b8cc8280a56ee426c1234d4015d775a5517cba8e", "36535983e24ebdb9bc1ad6c22910414abcd15028", "3598e797a4e62304b3c6b7908f7edc5188455355", "76894ef4d68e75e9748248add145113074828ab1", "7a86ce9f50025df73cb31bc8561430f85b04d713", "9c40a327c9b1909067d6df1232670a65f68fb3ba", "031b44ba629f4e2b7451e65d55ed899f5ab9bdd8", "3a728350f0b116c38310bbc96f2007d4f30d92b1", "e177cc5ef8291522ae12f5c6191e7bc162ca70de", "ae247e7192cfe90a420afa38655a7e3dcc2e97cb", "8e0b09096ddf89db06d3b8e02d8bcb1d80afe905", "cf0021f39124d0239059db3db046abbf7ab05c61", "343e4ab4c51dc418776abae02a40793af7d5e696", "260023d4c69008ea6646aacb8b378c1f4d3616b9", "393f65a84791dcb02d0bb5325b286e85f753b197", "2c82b8b251edaea68d3060d6f7fd56dcfa4a5e94", "11cab0ca1c9f1b5f3e91510308e5c186782c37f9", "61ef6a7a1776c24dca360a74c55ef4e9549a071e", "2259dc0fa16575b05ddfddf2619657b3511740b7", "1ec0ed3bc4a57c047f624a15066a94018da3b70d", "fa36cc612a292e41a8d1aa5a747d6594e7218e6d", "7db0d7aed47c18da95dc5dec3d0ed168c9468a55", "efbc86d872d593b8b9314856f066cff327a23563", "97454610f5a3f193ad31f8aec1ca2b1523fbe883", "b15c9ce413e6adc4a00051613011e7cea6098639", "18268d6c0ab86029b36d93ea69dd256c35fff7c5", "4b8ccc5dc742631936987ec836107325ec50d706", "47025ad9497125bec99f6ac0979c61607d06f747", "4ccfabfe6618ed7f9bf85d812bbea20c868200e2", "c0415bb27b98392b7e38ec8357009f5d55df7a0f", "1662dacc227b5fe2dab33fa1b5034cee10213ce0", "c5e32642448950ed15b9bb1c7015c3247a56a089", "97da68b4f1280db5dfd5cb0d21671122da3b4837", "027ec5f846a8c29a90214da96f84bb1189433bcd", "f92960f9dd542f77192c5e0182b01a3b934764d2", "5417214d750b4668c9566ee82d4685b03f21581a", "8cebfaeca21ba98283c9df2e6b4805417f3333bc", "f73f869aa70f62239a506bc345c36ea8d8ef01d4", "767ac62719eac4a31be56265f5d0ef232fbb6544", "318963a76d2936c2ab9abba392b156d8d928c2b6", "06ffec303d67e0eaa848e1dfc017b065ed678589", "11bcc333943657ba196d3820555c276ccbc4ff7a", "77280a624e4fbec76acadb0474c044560867d77a", "8042eb4fc72f626fffca21b480d460154e7895c5", "91beaf23d1aabb8f5a417a16038dde87bf61320c", "d5c2541c0c682aee5547120a8e8055e9483d7980", "67c445966f904ac5eaa463fcbe2652d2cc84cc17", "0147579276a64b7968a8db6c19eb5aafc8bca42d", "d576c7df813c647830a4ef07d8d846b2f91ebc52", "c9e6fe4207285a88171503263cd8f3e180686841", "3c8eb886ff91ba18c8abadc121705d3af254761c", "6b0f8beb6d88f7fc0738188ced3c85c28779b7cb", "5792909d3cacb3a5c206d597e9b2ba3ad8a97541", "e825c6749b5fcd681115206d73dc885731ede1f9", "d08d9c3828833bcacdc05208842d32f4c3710332", "03df7e1f627d3b6a7e66d0cbc89f8b4d9bd0cfaa", "7f6fef9d9ac8fac49d958e4cdd3c6519b35aa8b5"], "commit": ["Fix auto project to only test with ecj on JDK 11+.", "Enhanced `MoreTypesIsTypeOfTest`, and Fixed `MoreTypes.isType()` for primitives", "Fixed Readme of Auto and  Auto/Common", "Insert a `var unused` ahead of an AutoBuilder getter call. This will soon be a compile error.", "Fix a link in the AutoValue user guide.", "Fix documentation for using AutoValue with Gradle.", "fix typo (implemention\")\"", "AutoFactory: Add error message for duplicate parameters", "Fix a crash when `getLocalAndInheritedMethods` is called with a raw-type ancestor.", "Fix inconsistent quoting in `@ToPrettyString` example", "Fix a problem where `@SerializableAutoValue` could generate incorrect code for complex types.", "Add method name to getterMustMatch error", "Fix Gradle incremental compilation for AutoValue and AutoFactory.", "Fix Gradle incremental compilation. Fixes https://github.com/google/auto/issues/1071.", "Compilation error tests for further errors in `BuilderMethodClassifier`.", "Further compilation error tests for AutoBuilder.", "Fix README to show GH Actions status instead of Travis.", "Add some compilation error tests for AutoBuilder.", "Use a property for Error Prone dependency versions.", "Try again to fix snapshot/javadoc deployement.", "Fix a javadoc issues the last javadoc change introduced.", "Fix Javadoc errors (not warnings) and set javadoc generation script to fail if any command it runs fails.", "Improve the error message for a missing `build()` method.", "Fix Javadoc typos.", "Update versions of auto-service and compile-testing, and fix a bug with SimpleServiceLoader.", "Add `[tags]` to AutoValue error messages. This will enable them to be correlated so that we can potentially see which ones are commonest.", "Fix handling of `@Nullable Optional<T> foo()` properties being set by `setFoo(@Nullable T)` setters.", "Fix a problem with references to Factory classes in other packages.", "Make the nested @AutoValue class static otherwise you get the following error: `Nested @AutoValue class must be static`", "Change error reporting methods to use format strings.", "Fix 3 ErrorProneStyle findings: * A summary fragment is required; consider using the value of the @return block as a summary fragment instead.", "Fix the SerializableAutoValueExtension from crashing if an AutoValue contains multiple properties with the same type.", "Fix broken link in howto.md", "If AutoValue detects an error, don't invoke extensions or generate code. For example if there's a type mismatch between a property getter and the corresponding setter in a Builder, we may otherwise end up invoking an extension with an inconsistent state. Also the generated code is likely to have compile errors of its own, which distract from the real source of the problem.", "Make it an error if a setter has a @Nullable parameter when the property being set is not @Nullable. We will generate code that rejects a null parameter whether or not @Nullable is present, so allowing it is just misleading users of the API.", "When checking builder setter parameters, use the final type. The final type is the type after type-variable substitution. Report this type in error messages, since it may not be obvious.", "Fix 1 ErrorProneStyle finding: * Constructors and methods with the same name should appear sequentially with no other code in between. Please re-order or re-name methods.", "Fix spacing in generated toString() for @AutoOneOf.", "Fix a merge conflict", "Fix 1 ErrorProneStyle finding: * These grouping parentheses are unnecessary; it is unlikely the code will be misinterpreted without them", "Improved AutoFactory error message", "Fix 4 ErrorProneStyle findings: * Constructors and methods with the same name should appear sequentially with no other code in between. Please re-order or re-name methods. * These grouping parentheses are unnecessary; it is unlikely the code will be misinterpreted without them", "Suppress emitting errors about unprocessed elements when there are already errors in the processing round. The extra errors don't add any information and end up hiding the real errors.", "Changing oraclejdk8 to openjdk8 in hopes that it will fix our Travis builds.", "Fix PeerBaseMethod to not rely on implicit ordering of Elements.getAllMethods.", "Fix a template bug concerning @AutoOneOf arrays. Like AutoValue, AutoOneOf allows values to be primitive arrays, but the code template referenced an undefined variable in that case. The implementation of foo.getMyArray() copies the array, so the implementation of equals(Object) checks whether the Object is of the generated subclass, and if so accesses the private myArray field directly. For @AutoValue Foo, this subclass is AutoValue_Foo, and the $subclass template variable is set to that. But for @AutoOneOf Foo, there is a subclass per property, and we actually want AutoOneOf_Foo.Impl_myArray. So we need to make sure that $subclass is set to that in the #equalsThatExpression macro.", "Work around an ecj bug in Elements.getAllMembers(). It incorrectly returns static methods from superinterfaces, even though those aren't inherited. This causes AutoValueTest not to compile with ecj on Java 9+, because the MyMap and MyStringMap classes are wrongly shown to contain the static of()\" method that was added to Map in Java 9. AutoValue then tries to use MyMap.of() to construct a default instance of MyMap.\"", "In autoannotation.vm, avoid an incompatibility between EscapeVelocity and Apache Velocity. In Velocity, if an Integer multiplication overflows, the result is a Long with the correct value. In EscapeVelocity, the result is an Integer containing the bottom 32 bits of the multiplication. We should fix this incompatibility, but for now we can avoid it by doing the computation in Java rather than in the template.", "Expand the exceptions covered by the workaround for a JDK8 jar bug. Fixes https://github.com/google/auto/issues/715.", "Fix an @link now that @AutoService and its annotations are not in the same maven module", "Fix outdated links. Closes https://github.com/google/auto/pull/709.", "Fix a typo in an AutoValue error message.", "Fix javadoc reference", "Make it a compilation error for an @AutoOneOf property to be @Nullable.", "Fix GeneratedAnnotationsTest so that it works on JDKs 8 through 11.", "Fix indentation", "Fix incremental annotation processing of AutoValueProcessor, shade net.ltgt.gradle.incap", "Enable a test for a bug that's been fixed for a while", "Fix bug where ProcessingStep.process(...) was called with too many elements when there had been deferred elements.", "Adjust AutoValueTest so that it covers setting an immutable collection of T from a Collection<? extends T>. The actual bug was fixed long ago but never closed and never covered by an explicit test.", "Work around a javac bug. In at least some JDK versions, calling TypeMirror.accept on a type that has annotations will cause the TypeVisitor to be called on a version of the type without the annotations.", "Remove some garbage seemingly pasted by mistake into MoreElements.isAnnotationPresent javadoc. :-)", "Fix handling of @Generated in tests after 715b8eb505649a4acaaa5889d4f4b51a91dd8a91, 0383c1cf7472d7444463353aa2ac956c9471130a", "Fix handling of @Generated in tests after 715b8eb505649a4acaaa5889d4f4b51a91dd8a91, 0383c1cf7472d7444463353aa2ac956c9471130a", "Fix broken @links.", "If @LazyInit is available, also suppress Error Prone immutability checking on fields for memoization", "Give BasicAnnotationProcessor a unified error format so that tools can parse it more easily.", "Fix AutoValue tests to support Java 9.", "Fix Visibility.ofElement() for ModuleElements for JDK 9.", "Don't catch RuntimeExceptions thrown in AutoValueProcessor and AutoAnnotationProcessor. That can lead to poor behaviour when encountering compiler bugs such as https://bugs.openjdk.java.net/browse/JDK-8071778.", "Fix `@AutoService` example to reflect the fact that javax.annotation.processing.Processor is an interface, not a class.", "Fix a misleading builder variable name by rewriting with streams.", "Report an error if @Memoized is applied outside of an @AutoValue class.", "Fix a typo in MoreTypes that meant that, when comparing types, the containing type was not being compared correctly.", "Delete the asm dependency. It was needed for a hack to work around an Eclipse method-order bug. That hack has been deleted.", "Delete the code that worked around a method reordering bug in Eclipse. The bug was fixed in Eclipse 4.5, which was released in June 2015. Users who need to use AutoValue with earlier versions of Eclipse will have to stay on AutoValue 1.4.", "Add a compiler option in CompilationTest.correctBuilder() that should fix a test failure that only occurs on Travis.", "Give a better error message when @AutoValue.Builder is applied to a non-static class.", "Fix a bug in the code for AutoValue extensions that don't generate a class in the AutoValue hierarchy. If there are extensions but none of them generates code then our AutoValue implementation class will be abstract.", "Fix @AutoService javadoc", "Fix test which asserted the existence of a diagnostic on an annotation value, which was not correctly implemented by javac.", "Remove the functional-java8 test tree and instead add a new AutoValueJava8Test that encapsulates the most important Java 8 tests. Re-enable tests that were ignored due to a javac bug, but only if we determine that we are running with a javac that doesn't have that bug.", "Remove the exclusion of Truth from the dependencies of Compile Testing in the AutoValue POM. We do in fact want to use the later of AutoValue's and Compile Testing's versions of Truth. Otherwise we can (and in fact did) get hard-to-debug linkage errors.", "Fix AutoValueProcessor so it works even if an old version of @AutoValue is in the -classpath. Add a test for this configuration. Also fix a place where we were incorrectly comparing TypeMirrors using .equals, which is explicitly specified as being unreliable.", "Make separate test targets for the AutoValue functional tests, rather than using globs. This also revealed that the functional tests for AutoAnnotation weren't being released to open source because of a faulty glob exclusion.", "Add builder setter type to error message when type of parameter is not equivalent to target type. This is PR #394 by @gildor.", "Fix a number of incompatibilities between javac and ecj in the area of overrides, by reworking the logic of the explicit override implementation.", "Add a workaround to Template.parsedTemplateForResource that triggers fall-back logic if we hit a JDK bug that causes spurious IOExceptions when reading resources from jars. Also, rewrite TemplateVarsTest to use JUnit4 and Truth. Fixes https://github.com/google/auto/issues/365.", "Fix a couple of minor javadoc errors in auto-common.", "Fix compile-time constant expression overflows", "Fix typo", "Fix Java source files under third_party/java_src/auto so that they follow the new simplified import rules.", "Fixed typo", "Fix name of a test data class", "Fix a bug in AutoAnnotation when using Collections to pass values to generic array parameters.", "Fix typo noted by ersin-ertan in https://github.com/google/auto/pull/351.", "Remove the [] link from the AutoValue javadoc, at least until []has been fixed. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=123015689", "Restructure the code in AutoValueProcessor for handling extensions. This involves moving a fair amount of code around, but the resultant organization for method identification should be clearer. The principal purpose of the restructuring is to get rid of warnings about abstract methods when those methods are going to be implemented by an extension. A second purpose is to fix a bug where extensions would not work right if there was a toBuilder() method.", "Bump for Auto-Value release 1.2-rc1 (and fix a stale version in the main readme) ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=117743900", "Bump IT version of the jar plugin to 2.5 to avoid terrible jar performance on ubuntu due to a bug in pre-2.5 ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=117743218", "Fix typo in .travis.yml. Fix from ameya-pandilwar in https://github.com/google/auto/pull/304. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=114802238", "Fix auto factory issue where multiple copies of the same method can be generated when inherited from an interface.", "Fix travis failures by moving to container-based travis which doesn't invoke the OpenJDK7 bug in getHostAddress (which crashes the VM during GWT tests)", "Make it an error for an @AutoValue property to be @Nullable and have primitive type.", "Fixing AutoValue support for nullable properties using copyOf. This should work properly for @Nullable primitive properties.", "Fix AutoValue builders to support nullable properties using copyOf behavior without passing null to copyOf. ImmutableList.copyOf, for example, thows an NPE when passed a null.", "Fix a bug where AutoValue generated incorrect code if a method with a generic parameter was inherited by a class that supplies a concrete type for that parameter. For example `StringIterator implements Iterator<String>`, where the type of `next()` is String, not T.", "Fix the javadoc of AutoValueExtension, based on the changes in https://github.com/google/auto/pull/285 by rharter.", "Suppress new CollectionIncompatibleType Error Prone check by casting incompatibly-typed argument to query methods in generic collection types. This will enable us to make this pattern an error in error-prone preventing future occurrences of this bug.", "mdformat and fix some links", "In AutoValueProcessor, fix an exception that happened if the same abstract method was inherited from more than one parent. This is https://github.com/google/auto/issues/267. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=102926251", "Fix formatting.", "Fix apparent merge problem.", "Restructure the AutoValue code that determines the set of visible methods in a class, to fix a problem when abstract methods are inherited along more than one path.", "Fix scope for auto-service (fixes issue #249)", "In AutoValueProcessor and AutoAnnotationProcessor, change the case where the generated file can't be written from an error to a warning. This is an attempt to limit the damage caused by Eclipse bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=367599. If the file can't be generated for some reason, compilation will eventually fail anyway since the reference to AutoValue_Foo from the user's source code won't be resolved.", "In TemplateTest, fix some places where Java 8 type inference was mistakenly allowed to infer types at an earlier Java language level.", "Fix BasicAnnotationProcessor to deal w/ annotations on method arguments", "In the code generated for @AutoAnnotation, do not use the clone() method on arrays if the annotation is marked @GwtCompatible. A long-standing and hard-to-fix bug in GWT means that it doesn't support clone() on arrays.", "Fixes test error after changing AutoValueExtension API.", "Fix a bug that causing invalid code generated when using multiple AutoFactories implementing same interface. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=92862023", "Fixed BasicAnnotationProcessorTest.", "Fix to account for Dagger 2.x changing its prefix. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=90217115", "Fix style according to comments in pull requests", "Restructure the AutoValue builder code in preparation for the addition of new features. No functional change is intended, apart from a few minor rewordings in error messages. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=89992330", "Change Maven shading for AutoValue so that org.apache.commons is shaded. I previously believed this was not possible due to classes being loaded by name, but it turns out that it is, provided we avoid tickling a bug in shading related to string constants.", "Fix bad project slug in the publishing scripts, plus fix a typo.", "Undo accidentally introduced formatting error.", "Fix a couple of problems in value/README.md noted by Yarden Nir-buchbinder: (1) implementation class is AutoValue_Example_Animal not AutoValue_Example; (2) parenthesis about nested classes is confusing in text saying things can't be private.", "Fix a typo on ImplemetationMethodDescriptor.", "In @AutoValue classes, implement an abstract method `Builder toBuilder()` if there is one. Also, improve some error messages about incorrect types by including type parameters. For example, if the Builder.build() method is supposed to return Foo<T> then say Foo<T> and not just Foo. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=84167112", "Fix MoreTypes equivalence for TypeVariables so that in Map<K, V>, K & V aren't considered equal.  Also add MoreElements.isType(Element) and MoreTypes.isType(TypeMirror) as parallels to MoreElements.asType & MoreTypes.isTypeOf (to guard against exceptions from calling them). ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=83672418", "Work around an Eclipse bug where the upper bound of a type variable like <T extends Comparable<T>> can show up as being T, leading to infinite recursion. MoreTypes isn't tested with Eclipse at the moment, unfortunately, but the bug showed up in AutoValue's CompileWithEclipseTest when I tried to add a <T extends Comparable<T>> to AutoValueTest. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=83609722", "Rewrite the code that copies annotations from abstract @AutoValue methods to their implementations, so it no longer depends on AnnotationValue.toString() producing output that is valid in Java source code. The spec for that method says it must do that, but alas Eclipse ignores that spec. This is to fix https://github.com/google/auto/issues/168. It would be worthwhile to do this anyway, even without the Eclipse bug, because it means that the generated code can use TypeSimplifier to exploit imports. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=83224800", "Fix minor typo in generated code in README.md", "Fix the SuperficialValidator to properly handle unreasonable AnnotationValues (specifically  <any>\" and \"<error>\" strings appearing instead of real values where there are missing imports or other upstream compilation issues).  Migrate isTypeOf from Dagger to perform the key test (is there a sane match between the expected annotation value type and the type returned by the processor environment) ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=75599279\"", "fixed indentation of annotations in template.", "Fix the SuperficialValidator to properly handle unreasonable AnnotationValues (specifically  <any>\" and \"<error>\" strings appearing instead of real values where there are missing imports or other upstream compilation issues).  Migrate isTypeOf from Dagger to perform the key test (is there a sane match between the expected annotation value type and the type returned by the processor environment) ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=75599279\"", "Update javadoc of @AutoAnnotation to reflect the current state: array parameters are indeed cloned, and the feature is indeed available. Add a small section to the AutoValue documentation mentioning @AutoAnnotation. Update the error message for when an @AutoValue class implements an annotation interface, so it also mentions @AutoAnnotation. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=74408593", "In AutoValue's TypeSimplifierTest, there may be more than one error for ExtendsUndefinedType. Remove them all. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=72407132", "Fix version information in service/pom.xml", "Add MoreElements#getAnnotationMirror, a simple function that keeps getting reinvented with bugs. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=71121135", "Handle @AutoValue properties with erroneous types early, to avoid generating bogus code which then confuses the compiler enough to hide the original cause of the error. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69900140", "Fix typo in AutoValue's CompilationTest that meant the expected code was incorrect. I think this signifies a bug in compile-testing, since .generatesSources should not have matched. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=69505432", "Fix %x oversight pointed out by nfm@. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=68378221", "If an exception occurs during @AutoValue processing, always include its stack trace in the resultant compiler error message, rather than only if debugging. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=67064823", "Fix a bug where @AutoValue generates broken code when a property of an AutoValue object has a type which is ambiguous thanks to a type defined in the @AutoValue annotated class. E.g:", "Fix up some references to the maven artifacts, and make cleaner version variable.", "Add a README.md to auto-service, and fix some errors in factory/README.md.", "Fix AutoValue user guide address. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=63685081", "Remove the cacheHashCode option of the @AutoValue annotation, and fix its two current uses.", "In @AutoValue classes, make the presence of abstract methods with parameters a warning rather than an error. A bug in the Eclipse implementation of Elements.overrides means that we sometimes falsely detect that there are such methods when there aren't. It should be OK to make this a warning because if there really are such methods then the generated subclass won't compile because it doesn't implement them.", "Fix moe config to propertly place the Packageless* tests, which otherwise get caught and sent to the opensource folder. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=62359879", "Two changes merged together from commit surgery.    * Make it an error for an `@AutoValue` class to inherit from `Annotation` if the class does not define or inherit both `hashCode()` and `equals(Object)`    * In `@AutoValue` classes, recognize any annotation called `@Nullable`, not just `@javax.annotation.Nullable`. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=61434773 MOE_MIGRATED_REVID=60653207", "Fix extraneous non-unix line endings (`^M`) in checkstyle and strip extraneous spaces.", "Address some lint errors in the AutoValue processor", "Fix a small style violation.", "Convert an unchecked exception thrown by AutoValueProcessor into a compiler error. This leads to a less confusing experience for end users when a bug in AutoValueProcessor or javac leads to such an exception.", "Fix a bug where the AutoValue processor could crash if an @AutoValue class has a non-existent ancestor. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=58904082", "Fix AutoFactory to work correctly when implementing an interface that is an extension of a generic interface. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=57662999", "Restructure the code of AutoValueProcessor so that errors are handled more cleanly and so that it is ready for a subsequent step that will use imports instead of spelling out fully-qualified types everywhere. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=56745927", "Fix AbstractMethodExtractor to properly deal with packageless classes.", "Make it a compilation error for one @AutoValue class to extend another. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=56352705", "Fix classNameOf to generate the correct name in the case of packageless classes. I considered emitting an error for packageless classes, but it A) looks like almost all package-name checks were present and B) seems like it's a nice thing to have for folks experimenting with @AutoValue. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=56017339", "Fix pom to propagate nullable.  The annotation processor needs these bits in its classpath at runtime.", "Fix somewhat less-than-shocking mistake\" in generation of toString. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=55513735\"", "Fix incorrect AutoValue-generated code if a class inherits the same abstract method from two different interfaces. Ignore stupid compiler warnings about 'No processor claimed any of these annotations.' Remove the checkstyle rule that forbids trailing space.", "Fix a line number on a test", "Change the approach so that error checking is done inline with AutoFactoryDeclaration creation", "Add good errors (and tests!) for bad class names.", "Fix a typo in the auto-service pom", "Fix the annotation processing metadata", "Fix extra line break.", "Fix a typo in an error message ;", "Fix bad link to Auto-Factory.", "Fix spacing.", "Add a test for @AutoFactory on constructors and fix issues uncovered by the test.", "Fix example.", "Fix the configuration file.", "Fix the maven build", "Small lint error", "Remove old FactoryProcessor copy fromthe old package, and fix up some pom files."], "metric": [["0", "0", "0", "0", "0", "0", "0", "0", "2", "9", "110", "26", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "1", "112", "136", "0", "0", "0", "0", "0", "0", "1", "3", "12", "4", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "2", "2", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "2", "3", "4", "5", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "5", "4", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "3", "6", "2", "1", "1", "11", "4", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "0", "0", "2"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "2", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["4", "14", "36", "11", "2", "2", "35", "0", "0", "0", "0", "0", "0", "0", "2", "3", "0", "1", "0", "0", "4", "1", "0", "9"], ["1", "1", "2", "1", "2", "4", "6", "5", "0", "0", "0", "0", "0", "0", "2", "0", "0", "4", "0", "0", "1", "0", "0", "1"], ["0", "0", "0", "0", "0", "0", "0", "0", "2", "4", "10", "11", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "2", "5", "6", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["3", "14", "42", "27", "2", "14", "227", "26", "0", "0", "0", "0", "0", "0", "2", "6", "0", "11", "0", "0", "3", "2", "0", "6"], ["4", "22", "63", "17", "2", "3", "195", "0", "0", "0", "0", "0", "0", "0", "2", "10", "0", "0", "0", "0", "4", "6", "0", "9"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["2", "3", "13", "7", "1", "1", "332", "0", "0", "0", "0", "0", "0", "0", "1", "11", "0", "0", "0", "0", "2", "0", "0", "3"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "3", "6", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "3", "3", "8", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["3", "4", "0", "0", "0", "0", "0", "0", "1", "1", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "3", "0", "0", "0"], ["1", "1", "2", "2", "1", "2", "8", "3", "0", "0", "0", "0", "0", "0", "1", "0", "0", "2", "0", "0", "1", "0", "0", "1"], ["1", "4", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["2", "5", "61", "30", "1", "2", "28", "0", "2", "3", "10", "4", "0", "0", "1", "1", "0", "0", "0", "0", "2", "1", "1", "2"], ["6", "47", "139", "83", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "6", "0", "0", "31"], ["2", "10", "38", "15", "1", "6", "46", "35", "0", "0", "0", "0", "0", "0", "1", "2", "0", "5", "0", "0", "2", "3", "0", "5"], ["6", "22", "122", "110", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "5", "4", "3", "12"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "2", "2", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["7", "48", "193", "197", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "7", "0", "0", "36"], ["1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["1", "7", "15", "8", "1", "1", "31", "0", "0", "0", "0", "0", "0", "0", "1", "2", "0", "0", "0", "0", "1", "0", "0", "5"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "2", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "1", "2", "0", "1", "1", "35", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "0", "0", "1"], ["2", "6", "21", "10", "1", "1", "41", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "2", "0", "0", "3"], ["1", "3", "6", "5", "3", "5", "45", "16", "0", "0", "0", "0", "0", "0", "3", "4", "2", "2", "0", "0", "1", "0", "0", "2"], ["1", "1", "9", "4", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "3", "6", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "8", "31", "30", "0", "0", "0", "0", "0", "0", "1", "7", "7", "4", "0", "0", "0", "0", "0", "0"], ["1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["3", "6", "36", "41", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "3", "0", "0", "4"], ["1", "1", "3", "1", "1", "3", "47", "0", "0", "0", "0", "0", "0", "0", "1", "3", "0", "0", "0", "0", "1", "0", "0", "1"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "9", "27", "10", "1", "4", "67", "13", "0", "0", "0", "0", "0", "0", "1", "6", "1", "2", "0", "0", "1", "3", "0", "-1"], ["0", "0", "0", "0", "1", "1", "34", "0", "4", "4", "4", "4", "0", "0", "1", "3", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "1", "7", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1"], ["1", "1", "4", "0", "0", "0", "0", "0", "1", "2", "1", "8", "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0"], ["1", "1", "1", "1", "1", "1", "5", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "2", "4", "4", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["4", "7", "33", "31", "1", "1", "30", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "4", "3", "3", "2"], ["0", "0", "0", "0", "1", "4", "36", "17", "0", "0", "0", "0", "0", "0", "1", "2", "0", "3", "0", "0", "0", "0", "0", "0"], ["1", "4", "13", "13", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "6"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "2", "6", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "2", "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "-1", "0", "0", "0", "0", "0", "0"], ["1", "3", "5", "6", "1", "7", "57", "10", "0", "0", "0", "0", "0", "0", "1", "2", "0", "2", "0", "0", "1", "0", "0", "3"], ["0", "0", "0", "0", "1", "3", "4", "4", "0", "0", "0", "0", "0", "0", "1", "0", "0", "2", "0", "0", "0", "0", "0", "0"], ["1", "6", "15", "6", "3", "3", "0", "85", "0", "0", "0", "0", "0", "1", "2", "0", "4", "2", "0", "0", "1", "1", "0", "5"], ["1", "1", "0", "8", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["0", "0", "0", "0", "1", "2", "2", "2", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["1", "1", "1", "1", "7", "23", "17", "45", "0", "0", "0", "0", "0", "0", "7", "2", "0", "14", "0", "0", "1", "0", "0", "1"], ["1", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["1", "2", "4", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "2", "5", "4", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["0", "0", "0", "0", "2", "5", "37", "6", "0", "0", "0", "0", "0", "0", "2", "2", "0", "3", "0", "0", "0", "0", "0", "0"], ["1", "3", "8", "4", "1", "2", "17", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "0", "0", "1"], ["2", "2", "2", "0", "1", "2", "0", "63", "0", "0", "0", "0", "0", "0", "1", "0", "5", "0", "0", "0", "2", "0", "0", "2"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "2", "5", "6", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "62", "0", "1", "2", "28", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "1", "0", "0", "5", "0", "0"], ["1", "3", "11", "1", "1", "3", "13", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "1", "1", "0", "1"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "5", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["6", "8", "0", "401", "3", "3", "0", "221", "0", "0", "0", "0", "0", "3", "0", "0", "10", "0", "0", "3", "3", "0", "24", "0"], ["0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["1", "2", "4", "1", "1", "1", "32", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "5", "6", "4", "1", "2", "10", "1", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1", "0", "0", "1", "0", "0", "3"], ["1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["0", "0", "0", "0", "2", "2", "10", "5", "0", "0", "0", "0", "0", "0", "2", "0", "0", "2", "0", "0", "0", "0", "0", "0"], ["5", "5", "0", "77", "5", "5", "389", "1782", "3", "7", "31", "108", "1", "4", "0", "19", "158", "-2", "0", "5", "0", "0", "4", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "7", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "1", "7", "4", "0", "0", "0", "0", "1", "1", "2", "2", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["0", "0", "0", "0", "5", "5", "481", "0", "1", "2", "7", "1", "5", "0", "0", "35", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "1", "2", "2", "1", "2", "2", "2", "0", "0", "0", "0", "0", "0", "1", "0", "0", "2", "0", "0", "1", "0", "0", "1"], ["2", "8", "214", "21", "2", "3", "418", "21", "1", "1", "6", "0", "0", "0", "2", "30", "0", "0", "0", "0", "2", "13", "0", "3"], ["1", "3", "71", "4", "1", "7", "91", "5", "0", "0", "0", "0", "0", "0", "1", "7", "0", "1", "0", "0", "1", "4", "0", "1"], ["2", "3", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", "0", "0", "0"], ["0", "0", "0", "0", "1", "3", "4", "4", "1", "2", "8", "1", "0", "0", "1", "0", "0", "3", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["55", "72", "48", "126", "50", "68", "82", "169", "0", "0", "0", "0", "0", "0", "50", "0", "0", "2", "0", "0", "55", "0", "0", "0"], ["1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["0", "0", "0", "0", "2", "2", "3", "3", "0", "0", "0", "0", "0", "0", "2", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["1", "2", "26", "0", "2", "2", "35", "1", "1", "1", "7", "1", "0", "0", "2", "1", "0", "1", "0", "0", "1", "1", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["3", "20", "205", "85", "2", "7", "376", "12", "0", "0", "0", "0", "0", "0", "2", "20", "0", "3", "0", "0", "3", "11", "3", "7"], ["0", "0", "0", "0", "0", "0", "0", "0", "2", "3", "4", "4", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "4", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "3", "24", "1", "3", "3", "60", "0", "0", "0", "0", "0", "2", "0", "1", "8", "0", "-4", "0", "0", "1", "1", "0", "1"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "1", "5", "1", "3", "3", "24", "37", "0", "0", "0", "0", "0", "0", "3", "1", "4", "1", "0", "0", "1", "0", "0", "1"], ["1", "3", "14", "4", "1", "1", "85", "0", "0", "0", "0", "0", "0", "0", "1", "11", "0", "0", "0", "0", "1", "0", "0", "2"], ["0", "0", "0", "0", "2", "2", "52", "1", "1", "1", "1", "1", "0", "0", "2", "7", "0", "1", "0", "0", "0", "0", "0", "0"], ["1", "5", "17", "3", "1", "1", "18", "0", "0", "0", "0", "0", "0", "0", "1", "2", "0", "0", "0", "0", "1", "1", "0", "2"], ["1", "5", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["0", "0", "0", "0", "1", "1", "2", "2", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "10", "270", "300", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "2", "5", "1", "1", "1", "20", "0", "0", "0", "0", "0", "0", "0", "1", "2", "0", "0", "0", "0", "1", "0", "0", "1"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "10", "133", "135", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "1", "3", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["2", "10", "62", "55", "1", "2", "51", "0", "0", "0", "0", "0", "0", "0", "1", "7", "0", "0", "0", "0", "2", "1", "1", "5"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["2", "2", "2", "2", "1", "4", "31", "3", "0", "0", "0", "0", "0", "0", "1", "2", "0", "1", "0", "0", "2", "0", "0", "2"], ["0", "0", "0", "0", "1", "1", "3", "3", "0", "0", "0", "0", "0", "0", "1", "0", "0", "3", "0", "0", "0", "0", "0", "0"], ["1", "2", "6", "0", "1", "1", "24", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "0", "0", "1"], ["2", "4", "14", "0", "1", "1", "91", "0", "1", "3", "10", "2", "0", "0", "1", "1", "0", "0", "0", "0", "2", "1", "0", "1"], ["0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["1", "6", "27", "17", "4", "26", "112", "39", "0", "0", "0", "0", "3", "0", "1", "7", "0", "24", "0", "0", "1", "0", "0", "1"], ["0", "0", "0", "0", "1", "5", "9", "9", "0", "0", "0", "0", "0", "0", "1", "0", "0", "2", "0", "0", "0", "0", "0", "0"], ["1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["0", "0", "0", "0", "1", "4", "13", "6", "0", "0", "0", "0", "0", "0", "1", "0", "0", "3", "0", "0", "0", "0", "0", "0"], ["3", "12", "204", "144", "1", "4", "8", "7", "0", "0", "0", "0", "0", "0", "1", "0", "0", "4", "1", "0", "2", "11", "3", "5"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "12", "3", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "2", "4", "4", "4", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "2", "3", "3", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["4", "9", "12", "12", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "4", "12", "0", "-4"], ["5", "20", "111", "40", "2", "10", "86", "14", "1", "1", "10", "0", "0", "0", "2", "3", "2", "6", "1", "0", "4", "2", "1", "9"], ["2", "3", "30", "1", "3", "19", "31", "5", "0", "0", "0", "0", "0", "0", "3", "0", "0", "18", "0", "0", "2", "2", "0", "1"], ["1", "4", "18", "6", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["4", "10", "228", "190", "2", "5", "49", "6", "0", "0", "0", "0", "0", "0", "2", "2", "0", "4", "1", "1", "2", "18", "16", "3"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["5", "6", "0", "6", "3", "3", "0", "7", "0", "0", "0", "0", "0", "1", "2", "0", "0", "0", "0", "0", "5", "0", "0", "2"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "4", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["2", "8", "206", "27", "2", "2", "189", "0", "0", "0", "0", "0", "1", "0", "1", "17", "0", "0", "0", "0", "2", "12", "1", "4"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "2", "13", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "2", "8", "4", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "2", "4", "12", "4", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["2", "5", "11", "21", "1", "3", "46", "8", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1", "0", "0", "2", "1", "1", "2"], ["4", "14", "33", "19", "2", "10", "160", "25", "0", "0", "0", "0", "0", "0", "2", "37", "29", "-42", "1", "0", "3", "1", "0", "8"], ["0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "1", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["2", "6", "29", "5", "2", "13", "77", "14", "0", "0", "0", "0", "0", "0", "2", "7", "0", "13", "0", "0", "2", "1", "0", "3"], ["0", "0", "0", "0", "0", "0", "0", "0", "2", "3", "6", "6", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "2", "2", "84", "7", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["2", "3", "0", "8", "1", "1", "4", "39", "0", "0", "0", "0", "0", "0", "1", "1", "4", "1", "0", "0", "2", "0", "0", "1"], ["1", "2", "6", "3", "2", "5", "72", "2", "0", "0", "0", "0", "0", "0", "2", "6", "0", "2", "0", "0", "1", "1", "0", "1"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "83", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["2", "8", "33", "6", "2", "7", "100", "0", "0", "0", "0", "0", "0", "0", "2", "8", "0", "0", "0", "0", "2", "2", "0", "3"], ["0", "0", "0", "0", "0", "0", "0", "0", "2", "2", "140", "140", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "3", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "2", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "2", "0", "1", "5", "61", "16", "0", "0", "0", "0", "0", "0", "1", "1", "0", "3", "0", "0", "1", "0", "0", "1"], ["1", "1", "3", "0", "1", "1", "10", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "0", "0", "1"], ["3", "13", "62", "9", "3", "3", "52", "0", "0", "0", "0", "0", "2", "0", "1", "2", "0", "3", "0", "0", "3", "2", "0", "3"], ["1", "13", "78", "43", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "6", "2", "5"], ["1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "7", "21", "4", "2", "4", "41", "3", "0", "0", "0", "0", "0", "0", "2", "2", "0", "0", "0", "0", "1", "1", "0", "3"], ["4", "4", "66", "2", "2", "2", "56", "1", "0", "0", "0", "0", "1", "0", "1", "4", "0", "0", "3", "0", "1", "3", "0", "1"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["1", "3", "9", "8", "2", "3", "19", "2", "1", "1", "0", "6", "0", "0", "2", "2", "0", "2", "0", "0", "1", "0", "0", "1"], ["0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["7", "19", "166", "273", "1", "1", "2", "2", "0", "0", "0", "0", "0", "0", "1", "1", "0", "-1", "0", "1", "6", "4", "9", "7"], ["3", "5", "118", "2", "4", "4", "60", "0", "0", "0", "0", "0", "3", "0", "1", "5", "0", "0", "1", "0", "2", "3", "0", "3"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "3", "3", "13", "13", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "1", "1", "2", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["3", "4", "26", "25", "9", "10", "34", "115", "0", "0", "0", "0", "0", "6", "3", "11", "13", "-6", "0", "0", "3", "0", "0", "3"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "2", "5", "5", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "3", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["3", "8", "4", "50", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "3", "0", "5", "4"], ["0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "1", "0", "127", "0", "0", "0", "0", "3", "5", "15", "2", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "4", "0"]]}