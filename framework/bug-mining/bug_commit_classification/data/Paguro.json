{"number": ["c6430d962effb2ca9984d959c9883949010c4b2a", "091b487a61649676c874e51f1693d9856a425a30", "7e1d626ee459b1474f43f3ef6b35d0a37f70adaa", "acef163f13b1a2e46665bbafe219af61d75411fb", "0cf678e9cdfe69dc37c6ef13eac9c6574c74919b", "38dc354ad2eced1d66a4a9bec238702eaf197427", "dae750514778fd8f5479bcee773cce5284506013", "de2053cb20ccf7363af6a162e338d21b93336456", "da3813d1823fdd7e02667fc89044555266c9a746", "87124b7269664344360bcb6ffa8eddc2db7147fc", "a61a034e4f48546ce4528d55b4cd3efd8e13ce32", "95e53557fafcb778d8355b69f584fa092fa966ed", "e08627cfc567fd5a8670d95d58a040cae5a8b3bd", "9a8f224b113002fa02b2e1bb5bb54e725262ee06", "55401bdadd3d817c1b36f8e6d961b8fe4388adf2", "299d8179a2c2622a2d5318d3f5de64ea04713833", "fe128026b3b4b7e8096c86c99b80be0d9bb48eee", "bf4de20006b5405bf4c84c50a037ef0b28a060ab", "bf4de20006b5405bf4c84c50a037ef0b28a060ab", "4001ac37e5e47cdd519be5edc4c14daec4ea0649", "25436bde5dca6049603bb6c10f1d0a7862ce8747", "8765d056cd441cfa6a315d11ba123b60e60c1523", "971f7f2e0b8082b626f31f8579e9aeaab62633dc", "3d35fef6562fa901df32a601ef76756e7f0de9d8", "cc11b9b00b60746bcf3cb945604455c8a3ecc984", "bcdb28ed30001513142e3176ee89407a505e217f", "498ee7650f6d54dd44fd86c29ff9bd955ff24fe3", "8d60ecc402ec8bc8d469c549d0bd025f7181108e", "82cd8e4d188a04fca2862aace9eba40fb5694f83", "893d5884f34a2f2a0b7d7aaf731a015bc9b22934", "fccd011f9f96c367a3dc737d1f213511239e3ca5", "3b57dbf6b4ad6fcbff4f4a54dc309692cec49069", "de5a30ec5f888ceca9893d2d79b8312c20c7645b", "044811eaa882d5c02654c75dc4314255981eacd5", "88e6690faac2920844cf3f76bd75297304faeccd", "7088129b7b51c48a109e2c23115fb3444742e229", "6b90238ab238a893c094f7c2a01a8ee9db0db058", "f33b2fe773d388da82025069a08490cf7771edd3", "b18048766a868452f0dbc302b148e386a8413fe0", "79f6dbd9ab681db62a3fafd6dbe123277b016b20", "b0c2037b7d0e473ce14081e2b112c6674c2af6bf", "8a5821a5554cac027c9fb4d2e47b41e3273149a2", "3fbe89c4206be3b9563181bd7ba5d882a739ecf3", "a1bf088700aeceda1a993d852de87fc5859f0d4d", "766c4efdbc3b1ced1ec32677c1ecc5d8df98836a", "fa9646b8655bfa5bf2bf70aea56fdb78b3b603ad", "c16503f8caed751e4742cb3053bde485c97b8eae", "166558e924bfa658a9ee8ebcf01ff6bb26ce16b5", "c17058102c287e98aa9969b6193f84c2c7d334c3", "5e2abc946604e18e72ae45c4c577772c490c3bcd", "114e35f9934a9187b6cf71b8c1aab7051adbcf3e", "b11acb7af9c9f26ad70027981731091b0ed2088b", "8e57661afe367f8e35710aacdcc9c4c1e11a8386", "58db9af0a03b927ce549bc77e2a3f81afe1b0b99", "ac8b525f017fe70cfafa2f65230fde435daf26b0", "5a54be6544a48a9397b8bcb41df7029e8c10d4a5", "898466802ad8f523e44cdeb337e1e0f4045238e8", "bebfc12397374e7c6a6d9b5e2ac50601b95832b5", "6c26e4bce6deca3a6b9c86592226bc6f70596668", "da96d7a8f1952a205f72e1977ba2f99301dc98e0", "318a5231da661054a8e33df4855557f8d6ef1b07", "c9f6637791b0ef5c504a08cdbbc67ca769e1cfc7", "6899c8c4e8924fc408129076cf9f025d5643d0c4", "73945343771c5af029b6b228f0749ee9f218a5c4", "42406120545f558b9746956876a3bcffa0c13d91", "8913cc3e89bae637e0e2e301801710fa0e8d0213", "3177b2667e74bb94653bcc5a67c6de80d5e703a2", "02a47dca012d6192103a197854ebcc964ffd3e82", "6590aff3104fb0366e8531a8633020bcc531f78d", "9a9a10dc43914b7443246b3e034df9bf4ac95048", "c3eca3f1a64094797de37b2417fefd7e5f265841", "24359a620bfdf9e3b35b4befbdcbf283c7d57938", "a93d26848ac8af7aae24588a4f0f08c79a916456", "db27c3589c1bf2bf373abe0a4f39764780899a92", "bf1abe76fbede349de9bc22dbc08daf062bace84", "1c8d54bc91216a567e5abf1388624863020428b0", "8cfedafb8652d1f7a2d984e45a2e1cd7551ff8ad", "9017f6704ed783a7aac326d0f784af0106c44069", "2a22a1041f509418978df236f9de2d87ab2c19e9", "c0076070ffb5b4c75b9c2ad03bf9b53de828b2ab", "ccbb3558c1b5bf203edc50f836d575a5d13bdbe5", "e4ba38b6a4f14ac203af0cec73399a77bce50532", "70e1b550a8c1f4fca61567fc11ab626625ac0484", "684efbaf118da4013ee9bb73beeb546c651eb20f", "d68a6e5c7bc37904434a669f7900e5f673d59d90", "b0676e27f58c6b256a028a90c6c010ef1cbb89a5", "277c7ceb40f9e57da26f7af5002bfcca8f6e1375", "bba3ae2377d87f59f64940ebf2fa382b0ba1250e", "dca27786d5235681763985c9da139bb58a8330d0", "4d98526eedaba0ea94f5e5fe1c6e1b44d2b8db6a", "97f3236050621d0c583127fae58d7871ac36e813", "7667c766e537f9355f869b8d78b1b06940e0bae4", "5312ef86fac1a296f63fcbf52a8fa6992522871d", "5312ef86fac1a296f63fcbf52a8fa6992522871d", "ee6997eb9163a192962fffd04e655fa008ea8f2f", "f3dc7c7c6c626ebac15e61e103f187d3ab25bbe3", "821ab80d19420744864b9d55757d563426dd3a26", "0154d579f75205663d1782e83bf76c87e9085c92", "7ced9e3f80574a7ec9d955a01ac2eae8db5dbf2b", "91cb2b96e243e6eec93b6c448c466afbc7be4dc6", "ddd2cb64f9d55cd7d3578017c37349ff56e452de", "65f7875a3c3269594036bfd3e1197c7f84a185e1", "cba1815bf5f8298226bb0722afd7f1a20be05706", "4c7042ded0827fc8a3259dd8062a916286e2beca", "5c972e8cce06c885294a7c779a32fa9ba55c0aa7", "3ed3ba6524df78394c706d0febd76bb923d0b667", "a5fc235b25dfeed75597f57b0a7f14d4e10718f7", "82b2f9c19e28cb621cae53c7f0c197d144c245cc"], "father_version": ["5be77e999afb98abd0e6a0569353ee5343c36716", "7e1d626ee459b1474f43f3ef6b35d0a37f70adaa", "4826b5393eff8e109daacd58acd293f8c7fb8f5a", "cda84615ffa5868bf3cb9fa3c2925ce5f754eae1", "da81494efa5d048b597c7138947c3a5e64fa5a7b", "d71051c09e88494a7ecbaa7ec3c818a09321e51c", "277dfaa38548d92d0e2e86ddd2674142209cb4e9", "de98375df2dd9c26a8cb618d51862f52c64602af", "4e5aa9764efbe481dd67092d095afd14d67a05bb", "f69457bd5791499cef66909849733a9534e01cfb", "85c7862cf4d2c2ed95184e82cdb180a0c4fa23bb", "2c96e9b55770879d2eb99d8e440f3164252dfed7", "96b9b9721c5e3fb84b637d444952998796425af8", "0c5be045c8cfde811bba47ec09cbd1ecd8a7c11c", "299d8179a2c2622a2d5318d3f5de64ea04713833", "fe128026b3b4b7e8096c86c99b80be0d9bb48eee", "11857505bae981b3f3219a937b589dbc0d0da330", "c94ae5639d1dfae52b406160ca217b9e00e8035b", "eac0d64b2eb9496967334f635cdb270cffb2197b", "1a29eaf158c87288be3eacb7177fae5888bccab4", "0b2496953c365455e4d6e8a15da0d7a0846f0de0", "28b5fdf7774e268672cfec298fad43a6e8627d32", "945ebf209b5e7dff165f211a51728e0b5c3c84d1", "a197189d5ea64bde3a4993e26e80bea2ca760161", "5eadc4baabf575a1ca91a7a6fee5642e2bd33819", "e62a82174a03357b56b99b2bbff8a51e9b8a1972", "d7b39d7718781a03bd5f0798793b12c9841ef129", "477ac2bd4ee434af117a04e938dda1793142c718", "d47fe99fd161398757097b54d597a1e422257a9b", "fccd011f9f96c367a3dc737d1f213511239e3ca5", "286bcb401c4ead07b1f06a7cc003a63045ff2c2a", "9b348dfc5c12749a7a2951f0ca8ad921de6252d4", "91180486610e9ba0a59fe2931a45bf02693c184c", "b0ead5a32d781a55da628575922610b615a20d82", "e0fe14b2e569af0651ce6a988ab9fdafd4a6e18d", "8b3a49b0913b7b6fa799f47edaeaeaa17474e80a", "4c586d0976d3fb70d65979ce52af92a48435058a", "b18048766a868452f0dbc302b148e386a8413fe0", "79f6dbd9ab681db62a3fafd6dbe123277b016b20", "4db61713bcd01c33d659390e79fe8e4fe246aa8f", "47e42bf498d24ab3daa3311249b66487f9a4878c", "65bc520164fa431bbbae964cdefa73049763883d", "4ddc1a633e1da26cd56fbd4a20936283cc0ac731", "766c4efdbc3b1ced1ec32677c1ecc5d8df98836a", "259daa1a5947c79af81d406042fda414ddb0444f", "604e92eb4d8d897d01aa8c6f48daccf942124c78", "bc59eadfdbc21fc2af9fffa450921c856e6ab19f", "c17058102c287e98aa9969b6193f84c2c7d334c3", "5e2abc946604e18e72ae45c4c577772c490c3bcd", "cb2ef0aa25ec01cb67a1dd6852443fdb830a2cb7", "ca718ec22f5a11486e15808185131327bc24a5b0", "f4497c12dbfe8df14eee94d0fa0a04c501da4260", "bf9c1fa20984cea0e197f5dadf26cdb261d9b3c5", "f55341665ea619192c3703c663cf5e71106b7fff", "2532f0be77788be028610084890cd5e418c93358", "55990fa775fe110a913e7e3590030b41e15f6db5", "bebfc12397374e7c6a6d9b5e2ac50601b95832b5", "5ab98ed0bdf5d34f0defa7061c40542d872a8f78", "961078b245920a715b3875e686784bdffd4b780b", "c2075e73a9e6c4aa44327e8f11acfbe87e949941", "c9f6637791b0ef5c504a08cdbbc67ca769e1cfc7", "5f49520ceb57dfa40d18702aa0ea579b2aa253b9", "3e6a2190e7ade35777fb69417b34bdfc9a6b0071", "a1b9e90c2d46e873ba7154f67b3c1f82168cbdec", "6bcfcb50250ca58c88d820fdd9db9467b951727e", "89368fdca1d7dc0f4bcf743d086afec01f2877c9", "02a47dca012d6192103a197854ebcc964ffd3e82", "f0c82d4c6e0043f4f0b9e61797c706239589cbc1", "cdf3cf119b5ce06ecf0aea40f533c3678a95ad61", "4ba6843450b07f89d68be84bb30ec4ecaaff4caa", "ca6925a055227422ded415e0e21424abb02842b2", "a904a1100750d716634a80c9925cb2f864d34c8d", "efe605ea8e70ddebdb24176f4c31d1fc9ad6dd88", "4615a3e0655d18aba84c8eddc67945f4cb9f9617", "ecd13848a863519df9f66f981c9208d10d05fa9d", "96f1b62ff556b3d7811fb5da5025eb3d314a1e8c", "43fd8649281c66c31a660b8fbb87f5859d73390d", "a1f484646b6a9d6e452651fc52d39af9298e018a", "21dadd85bde90ac1215f17581227163c0772346b", "b4393542a67dfcfcdae3092d52b97852fc129cad", "eda0667606a41a9445f7cd1548c2de48219639be", "70e1b550a8c1f4fca61567fc11ab626625ac0484", "9454dc70614501cc2992cf87c6a55ba716e6d774", "c5f74b7c7b2d4ce4c2458ea284bf601b892f1936", "62d728e87fe88e1e450adca7875e7d31187b5030", "3f25a9cbfa25cd61389adee1eff77250bc8d1157", "b41be094cc7bb1e10d461b8bea525c49c02703f1", "87bc19c3ad0c7b8afec3cd6a2bd9d581c5524c7f", "4d98526eedaba0ea94f5e5fe1c6e1b44d2b8db6a", "0a9e2cead5c0ee05af05727263c8c8184d4abfe3", "c9a724bb45272de2ffab481cae59e8159d077512", "854202f6aae3cd2ecc245f86cfac84e2703dbc99", "35f06516fd0e9323568ebc8fff2f75eff450e002", "144a563752d8c953930471778f52c28303a5ce53", "b9d90aac24bfe873f857c7991d0d3917fa22cb87", "533d0a018b04ece2b49bdcb76475a1d94beed641", "aacce9dfd847fdbec5018279e1a72bd18d0c8207", "8432318f2f76fd54e846c1416f1c282039224646", "91cb2b96e243e6eec93b6c448c466afbc7be4dc6", "56806422b10a0286a0444e6b63265e671d1efee1", "63783ed175b5374d3d894701b4d0d1309f683c3e", "cba1815bf5f8298226bb0722afd7f1a20be05706", "3053822f1e4e5f5d18f722f36233814c424497d5", "fa4f1366426085722daa85aaabd8200393e66d4f", "e63157dc9adc22e8307ea0ed737aff47dcb8ae60", "0ca753cfa7c6c096dd83015dd7e1a8a248c963b1", "9a13dc003d63f35d898fcdf06edbacbc7b04a5ee", "6dac47fcdc7136594518a6f900937a115735b16e"], "commit": ["Fixed comment.", "Fixed trie synchronization in RuntimeTypes.", "Fixed appendSome() to take a covariant parameter", "Fixed Bug #47: 'RrbTree.split() returns wrong type' and added test to prevent regressions. Thank you, @fcurts, for reporting this", "Fixed comment for issue #34", "PersistentVector.MutVector.editableArrayFor did not actually replace the node it appeared to because it needed to replace the reference to the node, not the value at the node.  This must not ever get called in the Clojure implementation because it's copied straight from there.  No idea the performance implications of this change, but I suspect small? Thanks to Axel Kramer @axkr for finding and reporting this bug #46.", "Consolidated split methods into one big one to remove more duplicated code.  Fixed some typos.", "Fixed some nullability annotations in StaticImports to work with Kotlin 1.4.21.", "Fixed warnings and bumped version of TestUtils.  No changes of substance.", "Deprecated RRB-Tree methods known to have bugs.", "Fixed iml file name.", " - Merged [kmark's](https://github.com/kmark) changes to ues IllegalStateException (extends RuntimeException) instead of IllegalAccessError (extends Error) in PersistentHashMap.    IllegalAccessError was a holdover from the original Clojure source code and may have made sense in an earlier Java version, but IllegalStateException is a better choice today.    Thank you, Kevin!  - Updated test and plugin dependencies  - Compiled with Java 11.  - Fixed warnings", "Fixed node-length that I had left set for testing - oops!", "Fixed some generic signatures.", "Fixed more nullability issues.", "Fixed some nullability issues with the few varargs methods in this project.", "Fixed tests for newly annotationed NotNull parameters.", "Merged changes from master branch:  - Made most Cowry methods public  would throw an exception at Runtime.  I had done something that in retrospect is obviously dumb.  - Documented Cowry (Copy-On Write aRraY) better.   These are type-safe utility methods for dealing with arrays.  This project still aims to keep you from needing to deal with arrays, but sometimes you do, and it's handy to have copy-on-write routines for doing it.  More of these methods could be made public if they are needed.  - [Nate Austin](https://github.com/navision)'s memory-efficient iteration of just keys or just values from maps.  Thank you Nate!  - Fixed split() to handle splitIndex = 0 and splitIndex = size() thanks to a bug report from [Jonathan Cornaz](https://github.com/jcornaz) (curator of [collekt](https://github.com/jcornaz/collekt))  - Added Transformable.toImRrbt() and .toMutableRrbt() to make it convenient to transform things into RRB-Trees.  - Fixed bugs found using FindBugs - thanks to @cprice404.  There are still some reported bugs, but  I think they are rare corner cases that lack clear solutions.  This was the low-hanging fruit.     - Option.NONE is removed to avoid possible circular instantiation.  Use None.NONE instead.     - Moved Indented to new indent package.     - Moved static methods from the Indented interface to a new IndentedUtils class.     - STRINGS array constant from Indented interface is now private to the IndentedUtils class.     - UnmodMap.UnEntry.EntryToUnEntryIter.next() now returns a Tuple2 instead of some other one-off class.", "Merged changes from master branch:  - Made most Cowry methods public  would throw an exception at Runtime.  I had done something that in retrospect is obviously dumb.  - Documented Cowry (Copy-On Write aRraY) better.   These are type-safe utility methods for dealing with arrays.  This project still aims to keep you from needing to deal with arrays, but sometimes you do, and it's handy to have copy-on-write routines for doing it.  More of these methods could be made public if they are needed.  - [Nate Austin](https://github.com/navision)'s memory-efficient iteration of just keys or just values from maps.  Thank you Nate!  - Fixed split() to handle splitIndex = 0 and splitIndex = size() thanks to a bug report from [Jonathan Cornaz](https://github.com/jcornaz) (curator of [collekt](https://github.com/jcornaz/collekt))  - Added Transformable.toImRrbt() and .toMutableRrbt() to make it convenient to transform things into RRB-Trees.  - Fixed bugs found using FindBugs - thanks to @cprice404.  There are still some reported bugs, but  I think they are rare corner cases that lack clear solutions.  This was the low-hanging fruit.     - Option.NONE is removed to avoid possible circular instantiation.  Use None.NONE instead.     - Moved Indented to new indent package.     - Moved static methods from the Indented interface to a new IndentedUtils class.     - STRINGS array constant from Indented interface is now private to the IndentedUtils class.     - UnmodMap.UnEntry.EntryToUnEntryIter.next() now returns a Tuple2 instead of some other one-off class.", "Fixed runtime array type error reported so excellently by fcurts.", "Fix broken wiki link", "Fixed typo.", "Fixed split() to handle splitIndex = 0 and splitIndex = size() thanks to a bug report from Jonathan Cornaz (curator of collekt)", "Fixed bugs found using FindBugs - thanks to @cprice404", "Fixed JavaDoc.", "Fixed typos and removed duplicate text.", "Added better error messages and brought test coverage up to 100% for most OneOf classes.", "Added a little test coverage and fixed a little bug with bounds checking exceptions.", "Fixed dependency on STRICT_NODE_LENGTH being 32.", "Fixed broken test.  Added new performance tests for random inserts.", "Clean-up, improve test coverage, fixed an issue with broken Mutable RrbTree Iterator.  Test coverage is 88% with Radix=4, but only 76% with radix = 32.  Need to figure how to test more, but without the test running forever.", "Fixed some comments.", "Fixed all warnings and margin overruns.  Passed all tests with nodeSize=4 and nodeSize=32.", "Fixed unbalanced tree in split.  AFAIK, split, join, and remove are all working now.  There's still lots of assertions in the code ensuring validity at the cost of speed.  I think the big O characteristics are correct, but incremental local optimization has not started yet.", "Simplified test case for finding join/split bug and @Ignored it.  Added some comments.  Removed skinny-leg parents on a split.", "Have without sort of working.  I think either split or join yields a not-quite-even tree and join assumes it's perfectly even.  So either fix split or make join handle an uneven tree.  I think we want an even tree invariant.", "Fixed bug 17 reported by BrenoTrancoso - thank you", "Fixed more null/not-null comparison issues and made a test for these issues in order to catch them all now and make sure they won't get unfixed later.", "Fixed ComparisonContext.eq() so that it checks for null arguments before calling compare().  Removed Deprecated items from Equator.", "Changed return type of StaticImports: xform() and xformArray() from Transformable to UnmodIterable.  Thanks to @BrenoTrancoso for finding this and suggesting the fix", "Fixed a little bug in the default implementation of toString() that's been there for years.  Wow.  Made PersistentTreeSet and Map extend the new abstract classes and deleted some implementations of toString() and hashCode().", "Fixed compiler warning.", "Fixed some little issues, some from the merge.", "Fixed return type of ImUnsortedMap and MutableUnsortedMap.assoc(Map.Entry). Made ImUnsortedSet use MutableUnsortedSet's implementation of union() instead of the other way around. Added tests.", "Fixed illegal cast in MutableList.concat and made test for same.  Thanks to @pniederw for this", "Fixed little warnings.", "Made UnmodSortedIterable.castFrom... methods generic and serializable and wrote tests for same.  Added compareIterators general test utility (consider moving to TestUtils project).  Made ImSortedSet.headSet() delegate to UnmodSortedSet's identitical implementation.  Fixed some broken JavaDoc links.  Fixed some unimportant type warnings.  Cleaned up some comment line-breaks.", "Fixed issue with short left leg in a Relaxed node.", "Fixed issue with short left leg in a strict node.", "Fixed dangling leaf node on the right.", "Improved comments after explaining this last night.  Also left a note about a little bug in the way split works.", "Fixed split to work in one more case.", "FAILING TESTS: I added a little test coverage, but one of the random unrelated tests found a new bug.  I immortalized that with a new test, but didn't have time to fix it yet.", "Rewrite of Relaxed.subNodeIndex yields no performance improvement for radix size=4.  Found and fixed new bugs with insertRandom.  Also improved insertRandom to print out the random indices used when a bug is found.", "Fixed issue, so now passing previously failing test.", "Fixed up comments WRT right-margin and renamed RADIX_NODE_LENGTH to STRICT_NODE_LENGTH because it's easier to understand.", "Fixed little bug in previously unused code.", "Made the random test somewhat less random so that I can reliably reproduce the exact same error each time.", "Fixed off-by-one error.  All tests pass, but it's not splitting the Relaxed nodes when it should.", "Still failing one test, can only insert 20 items at index 0 (raix=4, makes 16 in tree + 4 in focus).  Renamed a bunch of stuff, fixed some bugs, and roughed out some logic for Relaxed nodes.", "Moved some things around to better consider consolidating logic in NodeRadix.pushFocus() because I think that successfully doing so will fix the remaining bug.", "Fixed bug with maxIndex() on NodeRadix.", "Fixed bugs reported by Peter Niederwieser and similar bugs I found while testing those fixes.  Also greatly improved tests for listIterator.  That will have to go into TestUtils soon.  It's probably ready now.", "Fixed issue where test sometimes took a long time due to creating and adding a million Integers to a vector (with heavy boxing/unboxing)", "Fixed release number in docs.", "Fixed JavaDoc errors.", "Merged Range bug fix and improved test coverage from NestingVector branch.", "Fixed wide lines in PersistentHashMap.", "Fixed tuple generator.  Ready to add more tuples.", "Fixed errors in the Inheritance Hierarchy diagram.", "Fixed the Inheritance Hierarchy document to match the recent changes.", "Fixed markup.", "Added FAQ and fixed errors in docs based on questions received.", "Fixed usage example.", "Fixed imports in usage example.", "Version 0.10.6: Fixed bug where giving Xform a null source would cause it to blow up later.  Added unit test for same.", "Fixed wording.", "Fixed broken link.", "Fixed termWhen implementation.  In One-Off_Examples I tested the timing implications.  for loops were still ~ 120ms.  Using 'Run tests with Coverage' UnmodIterable was ~950ms, Xform without early-term was ~800, with ~810.  Running tests without coverage, for-loop still 120ms, unmodArrayIter 120, xform 120, xform with early-term 122.  So I don't think this makes much timing difference.  I'm still not sure it's a useful feature, but since it doesn't hurt much, I'm going with it.", "Fixed typo found by John Tollison - thank you John!", "Fixed all kinds of issues with RangeOfInt and built test coverage to 100%.", "Fixed bug in SequenceFromIterable where an empty iterable would not yield the empty sequence.  Nearly doubled speed of SequenceFromIterable and added better tests for same.", "Improved javadoc, fixed concurrency/sync issue in LazyRef, and doubled the speed of SequenceFromArray.", "Fixed comments in equalsContract() test.", "Fixed longer sequence from HashMap.  Yay", "Fixed major issue with NodeSeq and added some (fairly messy) tests.", "Renamed some methods from ...Sorted to ...Ordered.  Fixed some bugs and circular definitions.  Added UnCollectionOrdered so that ImMapOrdered.values() could return it.  Old tests pass.  Next: more HashMap tests.", "Added Rich Hickey's PersistentHashMap and PersistentHashSet from Clojure.  It compiles without errors or warnings and all old tests pass once again, but no new tests have been written.", "Added test for little bug I just fixed.", "Fixed little bug.", "Fixed variance on function params.", "Fixed broken link.", "Fixed merge conflict.", "Fixed merge conflict.", "Added unit tests and fixed a few little bugs.", "added unit tests for PersistentVector (up to 80%) and fixed some bugs with listIterator.", "Brought PersistentTreeMap up to 85% test coverage by line and fixed a bug.", "Made over 90% test coverage for PersistentTreeSet and fixed some bugs.", "Added more tests, fixed more bugs.", "Increasing test coverage.  Implemented lots of equals, hashCode, and toString methods.  Fixed some bugs.", "Restored Function1 and fixed a couple of deprecation warnings in the tests.", "Fix inverted condition and add tests.", "Added tests for Sequence and fixed bugs.", "removed debugging info and fixed unit test.", "Converted another unit test from ScalTest to JUnit and fixed copyright profile.", "Re-added old file which is still needed and fixed version number on jar file.", "Fixed bug in ViewFlatMapped implementation", "Added reduce() and toUnmod... methods and fixed a copyright."], "metric": [["1", "2", "2", "15", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["1", "3", "11", "11", "0", "0", "0", "0", "1", "1", "3", "3", "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1"], ["5", "11", "13", "8", "0", "0", "0", "0", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "5", "0", "0", "7"], ["1", "2", "1", "1", "1", "10", "24", "13", "3", "3", "7", "6", "0", "0", "1", "0", "0", "4", "0", "0", "1", "0", "0", "1"], ["1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["1", "5", "6", "5", "1", "1", "15", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "0", "0", "2"], ["1", "15", "51", "71", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "3", "0", "5"], ["1", "7", "20", "16", "0", "0", "0", "0", "2", "2", "4", "1", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "7"], ["0", "0", "0", "0", "3", "17", "39", "47", "1", "1", "1", "1", "0", "0", "3", "0", "0", "9", "0", "0", "0", "0", "0", "0"], ["1", "8", "8", "10", "0", "0", "0", "0", "2", "4", "9", "8", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "2"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "2", "3", "8", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["3", "4", "19", "17", "5", "16", "60", "66", "3", "13", "28", "17", "0", "0", "5", "0", "0", "7", "0", "0", "3", "0", "0", "0"], ["1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["1", "3", "3", "3", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "2"], ["1", "2", "2", "2", "0", "0", "0", "0", "3", "3", "6", "3", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "2"], ["1", "8", "15", "13", "1", "10", "22", "12", "4", "5", "13", "5", "0", "0", "1", "0", "0", "11", "0", "0", "1", "0", "0", "7"], ["0", "0", "0", "0", "6", "9", "4", "74", "0", "0", "0", "0", "0", "0", "6", "0", "18", "1", "0", "0", "0", "0", "0", "0"], ["17", "63", "247", "200", "9", "28", "343", "105", "233", "237", "225", "75294", "0", "0", "9", "0", "0", "0", "1", "0", "16", "0", "0", "0"], ["18", "78", "147", "127", "18", "65", "295", "271", "231", "236", "117", "75618", "0", "0", "18", "0", "0", "0", "0", "0", "18", "0", "0", "0"], ["2", "4", "9", "2", "1", "2", "18", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "2", "0", "0", "3"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "2", "28", "6", "1", "4", "16", "17", "3", "3", "6", "3", "0", "0", "1", "0", "1", "3", "0", "0", "1", "0", "0", "2"], ["11", "20", "48", "108", "3", "6", "11", "11", "51", "187", "478", "1155", "0", "0", "3", "1", "0", "3", "1", "0", "10", "4", "1", "7"], ["0", "0", "0", "0", "0", "0", "0", "0", "15", "37", "61", "59", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["2", "3", "5", "3", "0", "0", "0", "0", "1", "2", "3", "10", "0", "0", "0", "0", "0", "0", "0", "0", "2", "0", "0", "0"], ["4", "7", "193", "86", "4", "5", "176", "46", "3", "3", "3", "3", "0", "0", "4", "61", "24", "6", "0", "0", "4", "0", "0", "4"], ["1", "3", "7", "5", "1", "1", "35", "2", "26", "80", "164", "147", "0", "0", "1", "15", "0", "2", "0", "0", "1", "0", "0", "3"], ["1", "1", "2", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "7", "95", "17", "1", "1", "4", "4", "1", "1", "1", "0", "0", "0", "1", "0", "0", "1", "0", "0", "1", "29", "0", "9"], ["2", "19", "70", "87", "1", "11", "166", "55", "1", "1", "3", "2", "0", "0", "1", "4", "2", "6", "0", "0", "2", "3", "1", "19"], ["2", "3", "2", "2", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", "0", "0", "0"], ["1", "28", "105", "66", "1", "2", "6", "7", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "1", "0", "0", "17"], ["1", "5", "11", "12", "1", "3", "0", "3", "0", "0", "0", "0", "0", "0", "1", "0", "0", "2", "0", "0", "1", "0", "0", "3"], ["1", "3", "7", "2", "1", "2", "16", "13", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "1", "0", "0", "2"], ["1", "2", "24", "0", "1", "1", "21", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "1", "0", "1"], ["1", "2", "3", "1", "2", "2", "10", "0", "3", "3", "6", "2", "0", "0", "2", "0", "0", "2", "0", "0", "1", "0", "0", "1"], ["1", "2", "15", "10", "1", "1", "83", "0", "3", "3", "9", "8", "1", "0", "0", "9", "0", "0", "0", "0", "1", "0", "0", "3"], ["3", "6", "20", "21", "0", "0", "0", "0", "3", "3", "11", "5", "0", "0", "0", "0", "0", "0", "0", "0", "3", "0", "0", "1"], ["1", "2", "3", "3", "0", "0", "0", "0", "3", "3", "6", "2", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "2"], ["3", "7", "5", "28", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "3", "0", "4", "1"], ["0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["1", "5", "11", "3", "1", "3", "3", "2", "1", "1", "3", "0", "0", "0", "1", "0", "0", "2", "0", "0", "1", "2", "0", "2"], ["5", "8", "20", "8", "3", "3", "203", "0", "3", "3", "7", "2", "3", "0", "0", "30", "0", "0", "0", "0", "5", "0", "0", "5"], ["1", "1", "4", "1", "2", "4", "17", "3", "3", "3", "5", "2", "0", "0", "2", "0", "0", "4", "0", "0", "1", "0", "0", "1"], ["2", "2", "3", "2", "3", "7", "28", "28", "0", "0", "0", "0", "0", "0", "3", "0", "0", "6", "0", "0", "2", "0", "0", "1"], ["8", "17", "83", "44", "3", "6", "71", "3", "2", "2", "2", "2", "1", "0", "2", "4", "0", "3", "0", "0", "8", "0", "0", "11"], ["1", "1", "11", "15", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "5", "9", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "18", "22", "1", "1", "6", "1", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "1", "0", "0", "1"], ["1", "3", "22", "7", "1", "2", "10", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1", "0", "0", "1", "0", "0", "2"], ["1", "6", "17", "20", "1", "2", "25", "8", "0", "0", "0", "0", "0", "0", "1", "2", "0", "1", "0", "0", "1", "0", "0", "2"], ["0", "0", "0", "0", "1", "3", "37", "14", "0", "0", "0", "0", "0", "0", "1", "2", "0", "3", "0", "0", "0", "0", "0", "0"], ["1", "6", "40", "18", "1", "1", "19", "15", "0", "0", "0", "0", "0", "0", "1", "0", "0", "2", "0", "0", "1", "0", "0", "2"], ["1", "5", "3", "4", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "1", "0", "0", "2"], ["1", "36", "62", "40", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "20"], ["1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "3", "1", "1", "2", "7", "3", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1", "0", "0", "1", "0", "0", "1"], ["1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "20", "149", "84", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "39", "34", "-18"], ["1", "4", "2", "10", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "2"], ["1", "4", "13", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "2"], ["4", "8", "25", "2", "3", "7", "103", "102", "3", "3", "8", "2", "0", "0", "3", "4", "4", "2", "0", "0", "4", "0", "0", "4"], ["0", "0", "0", "0", "1", "2", "2", "2", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["2", "2", "4", "4", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", "0", "0", "0"], ["1", "4", "31", "10", "1", "4", "145", "7", "3", "3", "7", "2", "0", "0", "1", "13", "0", "4", "0", "0", "1", "0", "0", "2"], ["1", "35", "90", "47", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "18"], ["1", "4", "9", "9", "1", "1", "13", "12", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "1", "0", "0", "2"], ["0", "0", "0", "0", "0", "0", "0", "0", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "3", "1", "9", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "3", "4", "61", "6", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "8", "43", "49", "1", "1", "2", "1", "0", "0", "1", "1", "0", "4", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "1", "0", "2", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "2", "7", "0", "1", "2", "6", "0", "2", "2", "4", "1", "0", "0", "1", "1", "0", "0", "0", "0", "1", "1", "0", "1"], ["0", "0", "0", "0", "1", "1", "0", "0", "1", "1", "1", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "6", "15", "8", "1", "1", "19", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "0", "0", "3"], ["1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["7", "15", "189", "93", "3", "4", "198", "48", "1", "1", "3", "2", "1", "1", "1", "14", "5", "2", "1", "1", "5", "14", "11", "7"], ["1", "3", "21", "11", "1", "1", "43", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "1", "0", "0", "4"], ["2", "2", "27", "24", "1", "2", "3", "2", "1", "2", "9", "18", "0", "0", "1", "0", "0", "0", "0", "0", "2", "0", "0", "6"], ["0", "0", "0", "0", "1", "1", "4", "2", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["2", "4", "47", "1", "1", "1", "36", "0", "0", "0", "0", "0", "0", "0", "1", "2", "0", "0", "0", "0", "2", "5", "0", "2"], ["3", "9", "47", "57", "2", "7", "177", "1", "0", "0", "0", "0", "0", "0", "2", "6", "1", "1", "0", "0", "3", "0", "2", "11"], ["10", "31", "106", "49", "3", "6", "67", "11", "0", "0", "0", "0", "0", "0", "3", "1", "0", "2", "2", "0", "8", "4", "4", "22"], ["17", "35", "1464", "78", "4", "11", "31", "27", "0", "0", "0", "0", "0", "0", "4", "0", "0", "7", "3", "0", "14", "111", "1", "23"], ["0", "0", "0", "0", "1", "2", "7", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "1", "3", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "2", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["51", "96", "3190", "1292", "39", "61", "2907", "618", "12", "16", "635", "115", "20", "0", "19", "0", "0", "0", "22", "2", "27", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["4", "31", "122", "118", "3", "5", "40", "3", "0", "0", "0", "0", "1", "0", "2", "2", "0", "2", "0", "0", "4", "0", "0", "3"], ["2", "2", "6", "6", "1", "2", "76", "0", "0", "0", "0", "0", "0", "0", "1", "3", "0", "0", "0", "0", "2", "0", "0", "1"], ["1", "4", "5", "5", "2", "4", "35", "3", "0", "0", "0", "0", "0", "0", "2", "2", "0", "1", "0", "0", "1", "0", "0", "3"], ["2", "7", "35", "20", "1", "3", "107", "2", "0", "0", "0", "0", "0", "0", "1", "2", "0", "1", "0", "0", "2", "3", "0", "6"], ["1", "2", "6", "8", "1", "4", "26", "3", "0", "0", "0", "0", "0", "0", "1", "0", "0", "3", "0", "0", "1", "0", "0", "2"], ["17", "38", "384", "92", "2", "5", "125", "15", "1", "1", "1", "1", "0", "0", "2", "5", "0", "3", "0", "0", "17", "45", "1", "14"], ["1", "1", "120", "0", "3", "4", "7", "8", "1", "1", "1", "1", "0", "0", "3", "0", "0", "1", "1", "0", "0", "0", "0", "4"], ["1", "2", "2", "2", "1", "2", "28", "0", "0", "0", "0", "0", "0", "0", "1", "2", "0", "0", "0", "0", "1", "0", "0", "2"], ["4", "8", "69", "23", "4", "5", "172", "0", "0", "0", "0", "0", "3", "0", "1", "7", "0", "0", "1", "0", "3", "6", "0", "6"], ["1", "1", "0", "9", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "1", "0", "0", "1"], ["0", "0", "0", "0", "1", "1", "73", "0", "1", "1", "1", "1", "1", "0", "0", "4", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "1", "37", "0", "0", "0", "0", "0", "1", "1", "2", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "13", "0", "0"], ["2", "3", "3", "3", "0", "0", "0", "0", "1", "1", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", "0", "0", "3"], ["6", "9", "125", "62", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "4", "7", "8", "1"]]}