{"number": ["3a47110360c0ab5fa224c7aabd5a123da810b7d0", "1addeb8a4f18ec040f8c66bd10ea40eb58a4f7f9", "d4e6051e7defa2476b367a7124f1bc3d501c03f9", "c95ab0ea252927e97b47f571ebaf7999b2b8b065", "792bd5ad5a9a441cbf66965f02c25c8e23e0c300", "b870d7e6b3a145ca1ef4c9901cdcf1d8d05fed8e", "f27208428086030f5025c2c908ab90a52f13148f", "1d54b103965ceba4b4b418c71145c2d0e424f821", "970ba1d1240ad599c601fbba3826b20efe0d8b20", "1af73cb47cc259262511d7dc9fed644da0b7da56", "594f4572e9725b42d7bfa6906a3a0e5cdf9a7fe0", "02c5e79925d455331377f3e6640cc450aecf6774", "3c46f24b8161a089aa6712f4f9c579428071c2e2", "b50d878b75b3b8b81246389cd39e5cd731b531f8", "8ebfe2aba36422710bf549a3c2d488163e412994", "c6843d9a179953b6459e7495b5016bfc2f59d83f", "38913c5946facc33f7fd17484aad28b918b41c4d", "a1fac3977b5c8451d9b759333c176256cc812cee", "e776deecd668303b21ea23c9f44a0bede1f84c58", "db4e610c3eb5bd4024582178c878b2ea4ae790d3", "76d64fb629e9cf39407ebd1d4508396b910cd279", "fe2c8c401c959204f461490a45c7c2da01d0fdf7", "85575622ddc4f59b7d51c5da8027a8298a4b35f6", "095f8c4594f2d014d2bb3b4d79fab65fac8b9e60", "1250fcb6c97318c08a8ac57ca24bd0d394eda066", "8c0ccb64b095a51a9eb670a8a72e6a07708c7fa7", "6eb262584d514776587b79e2adbf7d7745a019a5", "45448f4d72262477ce03752d1f8dc01b82086796", "c7769c8844e581e65bc01978a02e3b75c38c6ec8", "4899422f15b76543870dd9777d9bde3ec5c5fe0d", "4628eb07dbe26cc7bb2fb8ac6664eca250146256", "d53ecc69c711728f4042bdb10fa56904d8c23cf3", "3ca38ee965d9255e7842c826e2219241e44ba6c0", "83a2d5d9837b0a7f7e6ee166c4c46880104ca7c9", "40c8bd15c608002bab358ddadce451422e06074d", "bf2cc0dce08c1246023ba7808c59a9352cd0fb20", "6c4f9f593fb8bfbe9ceee8062e7679960b4b59e0", "32a011843939a7ebc7cca68c16c858b5ff865581", "33f5c001cc8133f7434400a23f72f69e171097a7", "b3fa77a587ab6e812ec25da43c6eaaf5e962e0ed", "9e81c652da55279ac03c6e7b25f72b7399904f23", "7ed7007020b0c7cd5d13f442ef01add1c6096533", "06cb378d9764c10ffd2c151cbe673951ec4fa09b", "8e36eaeb19cefa7f4a1d0798b658c6eb101cb6e0", "1f47a40e4c9a8770fdd4ef5c28195235a42d1df8", "1e476813416ae1423f28a11ede52c93a32f51eaa", "fd46e4d0d91e97e04660ae627b561fd1a4e3f162", "8aa1d6f720d2a96f9d833828ec1516b9e4252545", "12f53e2eb42a9ab457c95f17ea56eb3724e8b441", "b42543685dea929ce8632ba3b164c87123540ee7", "42cc2276dd5914831529b81311697ccec11c613a", "88ac8ec440009caead90691be8453d8e22059a06", "70a94b2925d53c2c273223aae84fdc181274aa36", "dd93c4da0565abc6c91789b25b5bbd9b9f26c686", "28f628c8b6fe32a26c6da91dc49fa2981c0eae3a", "64bda3f46f08c0a1a2cf236bc2e002132c039cf3", "a4bbeae83f74719313749b0253f6ec94057a3a89", "794c31a2bc39670c7ab6bc2b884849442f5c0ee3", "9430c3434808766a83ce26c388fa897344b5e0e1", "a620fe8d3942d7578b5eb49054436c50aa4d75f4", "6a85644f2ec91ee71f4f43e20244a3ec7f8c6122", "16162124b2c3184911d9ad5f0b80c7efe0ee3b93", "8dbfcfa7ab4062a2ea9fadd434a7721686fe999f", "4c4dc238b4e805fd2f8c793684afc8f15038c80c", "882ef428fce321e28008ecd86942ce975b9a04c3", "ef15c5b7e012087f90307a7312be29ae80f49fe1", "b3894a2c3b0da7707e6a973d11f6e581dde898d9", "3b75d5f0786a91618582daf729632719a9ba45f7", "b4fbea25c30d5273239d9f33e3efbd552d5cf510", "3d6625e4f4f1cbb51a3f0da50dc1e5ae724c0274", "3d4460c2cadb35723d6d3770c5bea2fb64339cf5", "956eed63805263de33f6a1f1559538d332c04dba", "dedf9634b82f037e0baf31d25d6f6be1014f556b", "08b0cd6f4991b48dcb07606b214f9eb5215e9905", "44004aa9b30a1d1cfe673e7cc8e6e9edf373444a", "ba7cee594acc18ef6a3169ec6ecda526b719224c", "38f8f71f3da2c676e097dbe7329ae0c1a60b5cde", "884f7286d6697419bc60d6e07ffa96cde4fa723b", "74e7b48f026ad2afadbf2f7272eb43bd9a1c8c5a", "cea4f68a30d847a2e498ccc900be6153dd01ef3f", "9f894b93dd6bdc1981b4dee38dd7d13cccc170b3", "849169c1d1bd3a5e42c21ff67661a6afebc8791a", "7f021e375825357718b9f9f90160c219fb5db73e", "335bb6dfae45a16dc5cd5cd19d3ac42fcf5d4bf2", "a5ac8382db34152ef1c2611d2946534db1043467", "f5a1def5b88437aaf4761a4e61c7d8857fb5798b", "63c9f9225318e4c146ab9b82511acd875cb32481", "485a3f7e0ebe6ba750d46d941d76e90e243c77e1", "198e0d87e3d4cf1abae484f4bfe2ff52300f7c43", "5b61284b17aee28ea12b803d91450cbc32fdaed6", "4b360929c0bb763fba1864e811ab39dc7c6bccca", "b39f688ccd7517d7e921c8d74c0c2615c651ef1d", "732460516f62f17471ee24713de8b65cdc6b0b52", "2b48cfb65c6735abe71d51912ad646ff1c9d13ba", "aabf07e2e65c36e78c9f9cd3e878c5df322f6b7e", "c89b93d87a744b1ad53bebe4cddb2942560d0a26", "34ae8a70344354aa623fb3bbf11440115827db1e", "06cb95d389b2f81d8c67a665c4f98ffbe5404569", "db0a5cf58e363cce4099db4ab4b28a59df8465f4", "422648212990b641fb9f870c08465768bef19935", "c01f79b97f9e52f78b9034fc6e9f8a8691beb9dc", "e0e80fe3f63992b08ee3a49a737508f9dd1dbca7", "88eea5e7a847fce59c4ea210025b636a6b56fd15", "851f4d0d6b9cd3de959e14620de7a391f3bb6273", "7574095231a7d49a69d4f08de06d082dd1bca75a", "272671c431755d97f9881c197084e430bd737168", "94daff9383c09bb51cf9199c03540a5fa58e99a2", "3d1bca61e4d56574dbd673c56c0196824545fa7a", "c34e9f14e200d8311a17ca3094ec241128a49f1e", "21abae2ae821ed119d9e9c5d997606d7e3c8b8b9", "246e30440367834ba965569fa73fde57d3d97d60", "6301273ca0486c7e3716cca28ccfd592b8507dac", "bae702a9e6838e5e73e03b112553f488134f8001", "a3cb7efdc2abe314bd0ac0ef2f6ef3a1c73d11f6", "c87783b9e57f649c0823bf8b01f06bec29c85eb1", "340cd7bd8ab91668ed6a8c302b7cf839e6e69bd1", "55762ee97c45dd53ebdf6eb2e9fc15e061dbfdc3", "aa9c606ee312ed33aaf95a2ee9648057b41581e0", "34aa680b7b3e49fdf100316120a78d617e240046", "6c08b7a4d9ce56735f0f5419da88f8844ff30bcd", "09af6ad77a5b4a792396a25572de2f84cfd2c8b5", "b235501afd44ce80dde1c0f312d7d289fe30f4d4", "3a477b44fcf03c6aed39f124bd2497b80a306438", "24501a370eb9884be7b88c7813fded5b1ba982ea", "d97b63d2bc4b3f1e0297c9e545a7398fef008218", "48fdd6763057b3572fabd6a08d74fe8e3244d068", "ad4e9459f802ee340d2ea38b6abce9fa0e47d7d2", "6475a255be494a46f2c6b06262d93406593be57e", "6edc2c27817993f4e3a621dc944420e1c24701e0", "7b2e0d69ab7f0bed397d0d49aee012a68e4edb68", "17ee777c4ebba044489a79ce16986083d1e8810d", "9af6116be9f2a910a3619439ddd3cb79a3848ae7", "d9404c08389156ea0336f68736af5f46cd60c9d6", "e66d2071d2e3b82c168a318dbd11d113dcdcde4e", "3828507302dcad2f37718ab4e9d5fb4502257277", "9183eb632c5a10780e9b13d8f4c650be56c639e5", "af7bfcea01d76e072b166c6c874c749d11949623", "e68d12250ad5a11079cafa79e2e4938c4f7b5509", "5864c93ba7acb83b7275342622dc967163fc55f0", "afe3ae61cbcd677f9d2a952ea0a22248295b210f", "2a502c3e08b28e31952677c850c3008c6a6f92d2", "9a148e6065d51755184cd0611b94b2b7671692e6", "821fba032b32d3539fedac00ae92aab8b2c97eb5", "c6a7e584f4cfa0885fafdb493223cfdbfaa110ff", "6fabcd89098b41811f671789adbaecee42f0f088", "a390d4c257680f6878cd29a7578ee8c0de9fa752", "21bea27da8a403791643edc048847d9a56772c36", "e58757debba98a34e3927df7bdcfbe0f38702628", "8f41ddb5136514254e305c8ee58cc3f9d187887f", "5983208755e9d46a8eb81d70b6a5e779758c8690", "939f473f9d70c4fca6179a186dde4cf803854888", "b84992b428494e3be1c68d03f7e394b147d3df8c", "dbf710875681c13280833a7796e37c650d934f9b", "bc2c7d042d37a0c5d4026ca46baaac5e2e29b44d", "d22f0a813dbfc3d86fbc0c30f144027cb14d8fa2", "5dda414fbb153f5cb20a88611f034f0ba14ffdd8", "eae9021a16b032b9c4b53293394e3c9a35b30ae4", "53b2deef6dd11ee0dc1f3c36f6780457e4ff0847", "a412ee914a245bb8ec07c032acfc8f5f7c33507e", "50cd0ac3b3a33bf74972f85a0ba4189d97437151", "9bc9ac7128ad145c1ea1f389aa5bec5858ab66c6", "d7b63493085c5c77840cf5ea97219760072dafe7", "a06925877b444b8b7cb393764ac282b256bb9b9d", "f84514465acc94b99fa552e1e5f5dffbf1cdf731", "d16ad2b50b9514eb85d60236880cdb288d64ab60", "097b54969434b3fb9384c7416c46221866c7a05f", "4e28ca7829c4c067a5aabbe5fee6cdce7661b580", "99b314e930e8f7f1b783c468c0f2284b52a9dcac", "e75d48c632caa10fab45746636009e1fd49c9e5d", "ea184541994a1c029bd94d5ae07df08b3c6055ae", "80e326eb0fe6972f2db94b483e61a44be747e262", "9e4f6a6549e244e53b5e508d19525a09e722e532", "2d649062db6aafb4cb054e6b309e44258dae673f", "6806318485061f65ceb1e10e9a105ed5a406dd60", "70656aa2a84af83ba93dfdc35463ebcc3adf800e", "b9c7a29007ffac1b3e5f4546c86bb794500440ee", "791d9d2ffe85b531e4bc4f33992242b7bbba4f21", "79bae887db72581919eb41c05abc683e6dcbba94", "6a1153b379704f9c1bc1615328052819592de848", "f34510908c6aadb0722b6814bc7d04e7906f9dd8", "6eb65580fab068b30fb9120c87e5c91c6aed03f4", "898ee735e65b4da2985487105c1b38207d1c76cb", "867746f02399adfb7e0cbcee763637a694620164", "90d4b59b7ed35637b93ee14c1b7e1c04585e8c59", "f740628d2417a0fdf09840d3ff7a7d95283abe9e", "7bec72f79fdf798595fe5977561f067ce44b091e", "e913ee83e42b79fb3509bef0639146e4cc294a6f", "b0c05b1a02fcd8d02d489b0fb78217f9d338f5c2", "52792fe75f2e47a4e8f93d737138e1fd6407a74f", "17b9a2797d38ca14e23fdc512410644f80a601b7", "4e00588ee3c6e2de56249a68be8a5c6a0576012b", "40356a9df55ed67c48e8ea68c0a78e4e36ce923f", "8b6bb734a492faf34674a2e6ff64ef1cbcb55a56", "79f69e47f4b7ecb107b7b130146a85a106da34d1", "2b57a4369d5e28baf5bb2d00637f2ecac607ccc8", "288c29a3e9670bbc8107a1b2ee945a10cc085405", "12606b107fbf4799d5b00720ad492f34f1cc5a98", "0ff3da62739d950e03960db16c66c892517c58f5", "803a64e100fa8907d7c3f94d07552d6e2ebd1cff", "0f3287ed7b5f5626b496ffc6294fa3e955559334", "d1950955857b423b968eed8138064fd4a181b472", "6ab4baf67cb5bcf2e6e75d1f617cdc442180e5c7", "b681d6d5f22de7a4ff3378404f223dccb279bbc7", "a9730c917a4a727427ae4d34067525841f275dab", "07b340c852629df57f757ba02333850698b26ca6", "e27759bff79eef57f57e709f958fe22d45ced1a1"], "father_version": ["fbeba6986af911832b5d7901e4145ac52f93d485", "aa6399dd69b87cb274006d6592644cce24a35cd5", "6c954ce2c284484fac5a7148c87fcefe25462dfb", "412174a756d221131026c484c2e2cb7e19a08696", "e5f34184147dd731f9706fe8238887a426d2ccf3", "328af32552039d321024097ab914f26555a849d7", "1bd606d621a0bac8ad8d85a96dcafe70efdd6b90", "b54e9ef50fe670bf93dd3b2b6851423be631b429", "3481ab0afd03626b61565965854c116491867501", "825ca135cac80a5126238d9b907737461ef9b432", "02c5e79925d455331377f3e6640cc450aecf6774", "3c46f24b8161a089aa6712f4f9c579428071c2e2", "6fc8b9774d1e05c3b3b884fd43cbb30c808fbbee", "efaac0648728e49692f8972a03b122a92994a42e", "fd957d5bc5e585cf7dc47e628f59eb10eb0a35e4", "51bbbf4254682ba88108d6d3895e8226e67a23a3", "a1fac3977b5c8451d9b759333c176256cc812cee", "e776deecd668303b21ea23c9f44a0bede1f84c58", "c05efe9f68cd5713f08678ddbd4243640895f141", "0d7457ab64d149b6b8984f7ad5d7995c32594ad3", "4743c148e9ced5f580374e1d6cdbacad714d5f36", "85575622ddc4f59b7d51c5da8027a8298a4b35f6", "a52f89b944dd183b7048f0ce3d4caf7b2ca7dd9b", "ad3224468d0a6019995e4350a9327328bd8a2e7b", "eb1016728508ff2b56852a6c6332640c20063cf4", "5de3d216cae50306f449781bf704a01246874a2b", "b2834778b52ac563993ba69910e887101055a2b3", "c7769c8844e581e65bc01978a02e3b75c38c6ec8", "c66d31ea41c3dfbedc70cdb87667f943ba6e7664", "f8b8bc50151646756d9e110941bc1f9c53dab349", "29b2f0e902ba661bd1380b14661980da486d7043", "3ca38ee965d9255e7842c826e2219241e44ba6c0", "e4abb6509131b1e91ee3b3566998659510a0174a", "293919efe93561d2c21f4764b2018ede03855254", "9714107a8d82160f79bc8d2bd7916d26e1bc50aa", "b974c819fe2f4776fa5a2f8a54e544540a07dbab", "785f14a61dc4b4499a9bf55471cd2df75d860cc5", "9c80ad505c6a37e58d771a4cef2f2bbc8119874f", "05ae3097571c9f98c97fa292cb40666f05c2bc93", "ece35aced692ed1ef9c29b0fea2e91dd81b5f652", "7ed7007020b0c7cd5d13f442ef01add1c6096533", "ca04f65b91a931c887e98f7062288ce2298b62cd", "5da7d764666dfc7f253a89ea0dd33968e2e9546b", "e0e6585713b506d587d946ff3e0ccc72750fafd2", "e162d059b6adb0a05098c491ab0a0e88d65611bf", "7a0a1282763927c5930c65e20de6b6ac58679a44", "e698c34b793f7479ecbb450cadb0ce812473541b", "12f53e2eb42a9ab457c95f17ea56eb3724e8b441", "ce2907e1431ec06136ae0394de7d4d9de03a909d", "1fc8c22ab3e36c5a1565070b21c5428abe95b295", "09cd7400d8fc187232a9538ff7a15ccd5f8ffb6d", "2210ecdeca7e5f5971a2d369f76231072cb91c50", "d9326ca5e7dac9c2f75f0002a9d7a88dc9cf15f6", "a35e8c2883eabe64d73b0caa7577cdba62f4db1d", "001bdca8eb6211e33eae3941837433c146056a0b", "a4bbeae83f74719313749b0253f6ec94057a3a89", "794c31a2bc39670c7ab6bc2b884849442f5c0ee3", "9430c3434808766a83ce26c388fa897344b5e0e1", "e68df96285585c5c344cc5c964c3e97ee8f13570", "6a85644f2ec91ee71f4f43e20244a3ec7f8c6122", "bbcd61f8ba3bc82abed3fe0157ff7a933075c7f4", "9fc467fcdda54f13d53466d86b878b0edd21d6a2", "220e546a58c8629bd2f6fb162336ff725dd4a9d7", "8a7b94481202fca93997664670dfbcea6e418dc1", "ef15c5b7e012087f90307a7312be29ae80f49fe1", "543ede9e95ce7261a515552e7485f630bf5a26fb", "e319cf489eda74d157a31fb36cadb7213fc927ab", "d1b8200048c0146bc8ee5e648ed8b19b1335573e", "8fd2fc1b2a744671d2ae7021b157e9fbd991c3e7", "53bebcb9535356c05140276bae9e81865d6503df", "c382d6bf90d1a55ad2930d53393b1d9d42a2d204", "35a2c6c4f89297380c39b735eb354381ca0416a2", "1c4ff686d37826530e2ba6c8fac72866da01bb2c", "44004aa9b30a1d1cfe673e7cc8e6e9edf373444a", "ba7cee594acc18ef6a3169ec6ecda526b719224c", "a24d63289b0af0dd3957893c1fc6aed575866bed", "4a1039f442e5e3bcd7b61aedcc8c93e589c7b9f2", "4998370b7f1eb04424962959fcc7cd84b1288ea7", "a866b63de7e15f4df98deb18e1d6a91787c132ee", "0df9219885b1caf0ec68dba9f1677cffccd894f0", "7f021e375825357718b9f9f90160c219fb5db73e", "7f021e375825357718b9f9f90160c219fb5db73e", "9df1c38518f712efc9f701af2e0821ac89e5f595", "0de6a10234181fc44cc7ca0d199f70a7d03a4cc9", "97586e108a444aff632701b400c6136d29ebf2de", "968562f1ca2be5c0b4d68997d7b147a40f9cab76", "80f6b87da398fd291adefe84b7bdcb98402abb5a", "198e0d87e3d4cf1abae484f4bfe2ff52300f7c43", "5b61284b17aee28ea12b803d91450cbc32fdaed6", "d6e82ac808fd889081ebcc7bf8fee0775b760ed2", "373b8c87d11d883d996d6dfeba03ecb54ebd43d0", "9c3c9d44040f3f9fc0f459097f42df00743d4dfc", "83ab33cd7d465118506df09f5df312136d9e7422", "c8809c9900f8c9fcb0ef23abd9607a2b8ea82495", "c89b93d87a744b1ad53bebe4cddb2942560d0a26", "b2138f1beec388c5e6ef105114e6cd077e4e8e69", "06cb95d389b2f81d8c67a665c4f98ffbe5404569", "47a6dc1d4ed1246df7246583c19903079dd5f639", "d81c0c88858c44bb8222ae6c9ee564222a701fb5", "c01f79b97f9e52f78b9034fc6e9f8a8691beb9dc", "77b825b1ffb79fdb0fef6097b706bde3838afb45", "88eea5e7a847fce59c4ea210025b636a6b56fd15", "851f4d0d6b9cd3de959e14620de7a391f3bb6273", "ec55f55f5ae9ea3e8f9f3e0b741b4b3136292b59", "3d105037ee5a57a03ff69b2a0e8e52d02028da08", "ddd1a667c8d013a55cccd8426411ca444d097fc7", "6e6acfef8526aaba9f3447b83b3067014a649783", "5e5eafd30fd3684f96dbc0c77fcbdd258c9cc2e4", "9884224bcc23e93195f68d53901be5aaef6524f3", "7472aa869d7aa5387db61c13dd59ab33229603d6", "1768840bf1e69892fd2a23776817f620edfed536", "4597a11dd3d3084fdb3672a5cd2cb3c8c33408ae", "329ae37bae79e415ea66a48a8554515666bd9aa5", "af926ca0392b426dbed0a6bc6b9f16b4e6e06ee2", "e214a7d02c75ba1fa6803cc739113aa92df35bba", "00ef9c26abe98e710d9ddd21c6cbac9300537c4f", "bfa166128028712ca21a1a87bb00e01db76c484b", "45a406856b8c7c37a75815a3337d157462efb8b3", "bd7209d4871ac00b2b056d7f6f2b9ea56e78b159", "dd62ece53182d382a0e81c8f20a016d00fd62678", "8c86698438cd8a5926dfdd6deaf436164c662f6b", "7ec69236e502be528d4346db8e89043832510577", "4ed4f0d0cda2ebcf06b340461450335156aba81a", "047447ababb6c1961f807e311661a333cc5329f1", "5e4e3d7fdf7b19d34662d022df5e6088e59668de", "bd85be966a4f4db082a2fb4c4664123ce715d6ec", "5b0e5a0f66ec923fe32d73600d4d7d7b891f4039", "fdd19202558a3cd434c05313fae68a29a4945f1f", "647cffeef108b510a8c914cf427df6b667de5ba1", "f4a48565b812cf9fef0ee331c0f2751a623b7810", "9af6116be9f2a910a3619439ddd3cb79a3848ae7", "e92d5c5a378fecd729d29de5e54a75fa8bbf467a", "92e080eefa924d450082413b87ff4be5c3ebc093", "3f974942eecfb0318740c0bce8bd50395a9db001", "dd62a2c982ac93ce89aee82a888b3f2f97244245", "64b55cc752448818ab90891fd658e1fbcee683d3", "0f7cee98a9d687ffde8352fdde68041d3d7355f2", "e2ad9b915ef907646f97d726c6936c086bd64c1c", "020e433a2bcd8a63f989e6313f2cdab92f20567d", "d2b29ea0e818e9690d204507199a69e9d0a51ea8", "5f642e15b3f501ac06cf55e8720a81cd02ff0c74", "9f938372d6b53ca177990093ba48ad22b815bcfd", "d003e3319590aa3b77eed6c0efa71ace5ba83dd9", "1fa3c98407e302701406d6766e8976b19c1e9453", "7933e2919c8c628bc0aee8fd61433a50bb58fc15", "98201b0ba2746bc4c1913acb77666070815605d0", "ec24dfc79c13e26fbe57bde2ff983cb668d7d345", "f7b1605b0250ed88d20acd07cb78cb51a949ae27", "5983208755e9d46a8eb81d70b6a5e779758c8690", "b9e4b218f9f32bc58b63f5fa6ca727c979299d17", "b84992b428494e3be1c68d03f7e394b147d3df8c", "dbf710875681c13280833a7796e37c650d934f9b", "8c5384710afc5947dcc0695d6119b86931fb10e7", "597a9283e2c52b21e33f0080c6daf2c70eab514d", "2e4a23bebbce280861453c0d6f6f0a3dfd0e6dde", "988ea01bf157b654a86b8f09b6588b940fd2332c", "9f893e631a18fe94ebc8b1ce314b460fae7edd93", "5186842153423749e74dff5cbd3fcf721a409372", "f3b1bce013961bae5e7b03c5bc7c26ebb31236a5", "c419bcd34f63e99196cef9c58293a2924f7bf83b", "f0daae3efa0ea396287806d71fe7f9a1934280a0", "a18ab0c7bfd8543aaef902e39a8db5daea899ace", "0615d6f1daf0bcf3d40eabcd27ba86a29c23aec3", "0ab43bd0e6d8f4b9299b817b40b6de624c2ad536", "952304d58f8c1200a3ff3dd63d18c9a2c796ed89", "f276bc7493761b72f637b1f309a9264a4b8066ff", "6cc98516efbc776277c3824a5f7790dd87ee3ff8", "0aa7f37d44da6765344dbc5f07b180b9e0eb7097", "e86b54f2fe7a2f943a1ddc22ff0853a4721f2bcf", "24a52cce0d839ce211b3f30837eceeeb6d2b12f1", "6a91ffcc2704da44e9b72a60219e4beba325a640", "d91d976f9e48dbb8c73ebc6e14e9115b42d42f37", "acd85c09d609dab63948add448d0e4408baf31a2", "f1a673edb28311852ad75fa04694aebbaca9579b", "b9c7a29007ffac1b3e5f4546c86bb794500440ee", "121fb769f7231eb574204c2f2d4910ae02fc7162", "79bae887db72581919eb41c05abc683e6dcbba94", "2f2e14e68f98df351e09f0389a40839a8719a7e5", "f34510908c6aadb0722b6814bc7d04e7906f9dd8", "dcbb5c5f7a5dcb00584f00930ea2f6e9db77ed21", "36beca739ba165cedece2769c87ada14372d0585", "553685d7aaefd4126f089bfefc341adaee53e333", "90d4b59b7ed35637b93ee14c1b7e1c04585e8c59", "a5256df0f4584ca20af395c9d0d6aabc9ad91d4b", "7bec72f79fdf798595fe5977561f067ce44b091e", "8ae235abd0ee8b00cd143f2cf7b280d1f7e76de9", "28496e5de001d2644287af827ac9c91b3e062538", "5c96d246821d632302149f2259740a15a816d0af", "1f972de5791ffc4c7837169187963c8ee6483160", "3c84e44eb465fdfff24e14c9890c3ab6b7636bd3", "dfd1afc16c14aaf318fde62c61c4a7e377fcba2f", "a2efc471afc161a3a071d3b44609ab712f217129", "33959a63b90f538e58cbf37b86001388d2729862", "db7ed463eb7978b820dfb5ca1f0845485d2229c2", "288c29a3e9670bbc8107a1b2ee945a10cc085405", "db7ed463eb7978b820dfb5ca1f0845485d2229c2", "67ba12fe5e2e2dd365eda302f64917dca0bbab06", "44c56d7059e774be9ca02ba529c326078ce10e4e", "0f3287ed7b5f5626b496ffc6294fa3e955559334", "d1950955857b423b968eed8138064fd4a181b472", "0f0bc96e5baf1128f1fcfd62f5957419ef909501", "25e958fdcb1f1002cfc1bf625f0fabfe5a9a0baa", "16aab853f15f1f9808a55fd21bccda188241f1bb", "e71f51b0bb2a6165249a0e2e834a83e31e35774c", "b93b7721cd862caaa1653577d247415038bfc65c", "0b2369b054cefbf67f3a495d4acd67170429f6c1"], "commit": ["Produce a more helpful error for `isInstanceOf(int.class)` and similar, and make analogous `isNotInstanceOf` calls fail.", "Fixes grammar in `StringSubject` error messages.", "Fix lenient format strings in common.", "Fix Javadoc links in c.g.common.", "Small fix in Correspondence's javadoc.", "Hopefully fix issue with snapshot deployment failing.", "Fix FieldSets.fromSetFields() to handle multiple messages with different oneof fields set", "Fix Tree#toString warning", "Fix a small but sense-inverting typo in the PrimitiveDoubleArraySubject docs.", "Fix Javadoc search.", "Fix Javadoc generation under Java 11.", "Fail more gracefully in the presence of what appears to be an old Samsung class-loading bug.", "Fix Javadoc location", "Roll forward from 2eb500240d0b71d54500afdd7f3eb82e445e31bc after fixing field scope issues:", "Fix null key bug in ProtoTruthMessageDifferencer#toProtoMap", "Fix 1 ErrorProneStyle finding: * Constructors and methods with the same name should appear sequentially with no other code in between. Please re-order or re-name methods.", "Fix 2 ErrorProneStyle findings: * Floating point literal loses precision", "Javadoc: fix `@link` references", "Javadoc: fix invalid `@link`s to `hasValueThat()`", "Specify explicit plugin versions to avoid an error under Maven 3.6.1:", "Fix a typo in a message in TestCorrespondences.", "Add link to newly filed bug.", "Link to newly filed bug.", "Fix broken links.", "Fix 'ignoringFieldDescriptors' typo in FieldScopeImpl", "Fix typo in 'message' variable name", "Link to newly filed bug.", "Fix Javadoc generation under JDK11.", "Suppress error for bad implementations of Comparable", "Fix a NPE bug in Fuzzy Truth.", "Fix error message for unexpected empty values for java.util.Optional values.", "Link to the bug I filed against the Maven Enforcer Plugin.", "Fix links broken by search.maven.org UI change.", "Fix typo in Subject.failWithoutActual().", "Fix a bad return in PartialScopeLogic, introduced in []", "Fix NPE in MapSubject.containsExactly et al when a key is present with the wrong value, and the actual or expected value is null.", "Fix Javadoc typo.", "Fix typos and make some clarifications.", "Enable some tests that I fixed a while back.", "Fix a bug where the full diff for a Proto is erroneously printed twice, even when there are no matches.", "Fix IndexOutOfBoundsException when `prefix + suffix > length`, diff edition.", "Fix IndexOutOfBoundsException when `prefix + suffix > length`.", "Fix use of ExpectFailure from Truth's own tests, which we accidentally broke in 06e03c143e3ed0cba608fbd3c610d9d7e5701b64.", "Fix linter error in IterableSubject about grouping overloads.", "Fix a small typo in GuavaOptionalSubject", "Fix maven-javadoc-plugin problem in a better way.", "Fix Javadoc errors and *intentionally* enable doclint.", "Call check().that() instead of directly calling Subject constructors. Direct calls require access to the FailureMetadata instance, which is currently visible only to MultimapSubject because I hadn't fixed it yet :) I think I had thought it would be harder than it actually was.", "Random cleanups: - reorganize Expect to divide clearly into publicly accessible synchronized methods and non-accessible @GuardedBy methods. (Of course the visibility modifiers don't mean much within a class. I left them in as a hint about my intentions, but I could be convinced to rip them out.) - add Javadoc for the default ExpectFailure constructor - fix a typo in FailureMetadata - fix a Javadoc link in Subject (by adding an import)", "Fix license typo.", "Update Error Prone annotations version so that we can used @GuardedBy.", "Fix output message when a single expectation fails in Expect.", "Fix CheckReturnValue error in OptionalLongSubjectTest", "Fix bugs where the return value of a call to a method annotated with @CheckReturnValue is ignored, since the call is performed in the context of a void-returning lambda expression.", "Fix bugs where the return value of a call to a method annotated with @CheckReturnValue is ignored, since the call is performed in the context of a void-returning lambda expression.", "Fix the outdated link of google's java style guide", "Fix some more broken {@link} comments.", "Add a stub PathSubject to avoid an ambiguous argument error.", "Migrate GuavaOptionalSubject to use ExpectFailure, and resolve a bug in the implementation.", "Fix out-of-sync dependency (all other builds are on 2.0.18).", "Fix Javadoc missing code\" typos.\"", "Fix javadoc typo in FieldScopes", "Remove the synthetic cause from truth assertion errors.", "Add test coverage for the mutable v2 API in ProtoTruth.  Fix a bug in FieldScopes with said API.", "Fix typo in LiteProtoTruth documentation.", "Fix assertThat(Double.NaN).isNaN() in GWT/j2cl.", "Fix typo in FailureStrategy.", "Migrate Optional*Subject tests to use ExpectFailure, which uncovered a bug in OptionalSubject.", "IterableSubject now supports Map.Entry as type when toString() is equal so that MapSubject error messages are improved.", "Fix a minor bug in some sample code in a Javadoc.", "Fix the comparison rules for Proto Map fields.", "Fix ErrorProne warning:", "Add missing space in MessageDifferencer checkArgument error text.", "Add comments to some empty catch blocks in Primitive.*ArraySubject.isNotEqualTo to fix the warnings. Also add the javadoc for those methods (it was missing and the semantic is worth describing) and fix an error in the javadoc of .isEqualTo (which claimed that expected was an Object[] when it isn't).", "Disambiguate OptionalSubject.hasValue() error message when actual and expected have equal toString's.", "Disambiguate GuavaOptionalSubject.hasValue() error message when actual and expected have equal toString's.", "Improve the error message we get from doing:   assertThat(floatArray).usingExactEquality().contains(someDouble);", "Fix a warning in MapSubjectTest. ErrorProne quite reasonably complains about assertThat(actual).isNotEqualTo(actual).", "Slight simplification of MultimapSubject. The private two-arg containsExactly method was called from exactly one place an the failVerb argument was always a fixed string literal. So we might as well simplify things my inlining both the method and the argument.", "Fix typo.", "Fix correspondsInOrderExactly to support empty expected and actual", "Fix correspondsInOrderExactly to support empty expected and actual", "Fix containsExactly to support badly behaving iterables which don't suppose multiple iterators.", "Fix ProtoTruth varargs APIs to not allow empty argument lists.", "Update Truth to Error Prone annotations 2.0.12. Guava needs this version, but Maven is apparently happy to (sometimes) use the older version specified by Truth. This fixes the flakiness introduced by CL 137765885.", "Rename matchesContentOfSubMessages -> matchStateAppliesForAllSubPaths and document clear semantics.  Fix logic for field descriptor matching and compound field scopes to match the new documentation.", "Stop using ImmutableList for storing elements in the implementation of Fuzzy Truth, because we want to support nulls. (Unfortunately, the previous test case only went through the most trivial code path and didn't trigger the bug.)", "Fix handling of ignored FieldDescriptors on sub-message fields.", "Fix a typo (I assume) in one of the failure messages from IterableSubject.containsExactly: it says contains only\" rather than \"contains exactly\".\"", "Add a paragraph to the javadoc for ProtoSubject to explain the value proposition a bit more clearly. In particular, I think the fact that you can get better error messages just by changing to this assertThat is worth pointing out.", "Fix bad @link.", "Fix some error prone compilation problems and suggestions.", "Couple of small fixes for IterableSubject:  - In the error message for UsingCorrespondence.contains(), say elements that\" instead of \"elements which\". It's a restrictive clause. (See e.g. http://www.getitwriteonline.com/archive/103103whichthat.htm for the grammar geekery.)  - Clarify a couple of bits of javadoc which seems vague/confusing.\"", "Fix four unchecked cast warnings in MapSubject and MultimapSubject. They seem easy enough to avoid, so we might as well.", "Improve error message for MultimapSubject.containsEntry() ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=127233406", "Improve error messages for MapSubject.containsEntry() when the key or value exists but with the wrong mapping. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=127202155", "Fix a couple of typos in the javadoc of Primitive(Double|Float)ArraySubject, which referred to isWithin instead of hasValuesWithin. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=117822494", "Fix failure messages when assertThat(nullBoolean).is[True/False](). ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=116906970", "Fix the Truth continuous build in open-source by movign to the container based system which does not suffer from the degenerate hostname lookup bug in OpenJDK7. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=111807877", "Make assertThat(doubleArray).hasValuesWithin(tolerance).of(expected) take double... instead of double[] for expected, and add .ofElementsIn(Iterable<? extends Number>). Similarly for float. While we're here, fix a couple of typos in text, and add tests for the case where the object (as well as the subject) are null. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=111610534", "Fix a typo in Tolerant(Float|Double)Comparison's of method's javadoc. The expectation isn't specified earlier, it's specified here (assuming that this means the expected value). (There are a few things like the failure strategy and optionally the custom subject name and custom failure message which are also specified earlier, but it doesn't seem worth mentioning those here.) ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=111445718", "Fix the pom files to address", "Fix typo in MultimapSubject. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=109327879", "Update the TODOs about Primitive(Double|Float)ArraySubject's atList methods to refer to the bug which has more discussion on what to do. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=108848712", "Remove incorrect copyright statement and email address. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=107815993", "Fix typo in MapTest. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=107532119", "Improve error message for assertThat(multimapA).isEqualTo(multimapB); ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=105864488", "Fix int/long comparisons bug by adding: -IntegerSubject.isEqualTo(Long) -IntegerSubject.isNotEqualTo(Long) -LongSubject.isEqualTo(Integer) -LongSubject.isNotEqualTo(Integer) ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=99529535", "Fix some issues in the release script.\"\n9884224bcc23e93195f68d53901be5aaef6524f3\"", "Fix some type inferencing, and catch some varargs warnings en-route, and fix the internal build to prevent these sorts of regressions. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=96131590", "Delete duplicate CollectionTest (all tests were already moved to IterableTest). Fix some test names in IterableTest. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=95327287", "Update mvn-deploy.sh to be more convenient for people with only one key, and with better error messages.", "Update the poms in preparation for release 0.27, fix some release related pom jazz, and add Kurt as a developer.", "Make error messages from Expect more useful, by including stack traces of the failures.", "Fix generics bug on ComparableSubject. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=93548669", "Make error messages from Expect more useful, by including stack traces of the failures.", "Add a method to find out if any errors have occured so far. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=92135433", "Use NullPointerTester on Truth and fix missing @Nullable annotations. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=91592303", "Fix Javadoc of PrimitiveLongArraySubject to refer to long[] rather than int[]. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=87059146", "Improve error messaging for object arrays, and pick up more usernames. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=86496606", "Fix handling of .named() for MultimapSubject#valuesForKey(). ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=85021096", "Change .named() error formatting to: numbers (<[1, 2, 3]>) should have contained <5> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=84815449", "Improve error messages when checking map equality. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=83529597", "Fix executable bits on shell scripts.", "Fix redundant branch in StringSubject.isEqualTo()", "Fix a bad package reference in a javadoc code sample.  (h/t david saff) ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=78691116", "Fix handling of multiple proposition arguments when using thatEach() https://github.com/google/truth/pull/145 ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=78342022", "Fix permissions on deploy utility.", "Fix snapshots.", "Fix broken apidocs site stuff.", "Fix up travis to not use their extra repos (which are not on a CDN) and force updates of snapshot dependencies.", "Fix up javadoc unzipping.", "Improve error messages for containsEntry/doesNotContainEntry. Clean up tests (remove silly map() method). ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=75209398", "Better error messages for contains and doesNotContain ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=75129571", "Reword error message to the common denominator between Java7 and Java8 messaging.", "Improve checking of error messages in MapTest. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=74252317", "Fix deprecation advice for CollectionSubject.Has.exactly(E). ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=73929256", "Prepend custom messages to the actual error messages instead of discarding the actual messages. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=73318024", "Make Truth final. Fix javadoc example in Truth. Make Truth entry points pass through to the default TestVerb. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=73130381", "Collapse Truth's Has interface into the only implementation. Fix up a caller who was depending directly on the interface. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=72902811", "Hide Truth.ASSERT and fix up the remaining callers. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=72746146", "Fix up iterables to support the newer API. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=72666340", "Fix some file permissions and spacing.", "Update Truth to use the newer TestRule and fix a few minor things.", "Fix old link.", "Fix a bad bit of floating point math, and extract a utility class (with tests) for it.", "Fix named() for array-types.  The simplified generics that were originally used (but weren't for, say, collections) caused the concrete type to be ignored and the abstract parent type returned from named().", "Move gwt-incompatible methods to Platform, add a gwt-compatible stub, and fix up the tests.", "formatting fix.", "fix imports.", "Fix copyrights and generics in TestVerb.", "Fix up some javadocs.", "Fix error names a bit.", "Add missing test file which wasn't added by mistake.", "Fix bad merge in string test.", "Fix camel case on method name.", "Add a `doesNotContain()` method to StringSubject, add some tests, and fix null handling in StringSubject.", "Fix up readme to the short version that points at the website.", "Fix up the GWT version of the string formatting for internal special failure messaging.", "Fix up some string assembly - the stringbuilder isn't buying us anything, and rename wrap() to quote()", "Fix StringSubject so that it more meaningfully reports errors for null strings.", "Add a means to pass in a string comparison, to allow for more robust error reporting in the string comparison failure case.", "Revert safe varargs fix until we figure out how to let this play nicely with Java6.", "Add a few extra test cases for has().exactly() and fix some style issues.", "fix up deploy script.", "Fix creation of truth-gwt.jar with the unfortunately (still) manual process of adding another emul class, and excluding incompatible sources from the jar.  This filtering needs to be automated.", "Fix TOC.", "Fix an NPE in mapsubject with tests that catch the error, plus a few extra tests.", "fix copyright line", "Fix a bug when passing null in the third position of some methods.", "Fix phases so artifacts get generated before signing.", "Fix up creating a -gwt artifact, exclude gwt emul sources from the main sources jar, and package it all up.", "Fix up build to use an emulated set of classes, to support GWT, add the emul classes, and try to make the GWTTEstCase work with such.", "fix some things.", "Fix link to CI.", "Fix link to CI.", "Fix up subject.hasField(...) to support .withValue(foo);", "Fix up ClassSubject and Subject to use a hierarchy search of getDeclaredField() instead of getField() which will throw NoSuchFieldException on private fields.  Also, setAccessible(true) on fields before using them, so (in a testing context without a security manager) the proposition for property access can do the right thing, even on a private field.", "Why were we doing string concatenation of concatenated strings?  Meh... fixed.", "Fix extraneous parameter (legacy) and make some stateless functions static.", "add annotation to the test so we exercise that code... found bug, fix code and test.", "fix up extensibility tests with better names, plus a failure test.", "Fix up inOrder() hacked test into three tests with factored method.", "Various fixes to address PMD and findbugs errors, plus a few minor wording changes.", "Fix code coverage output config.", "fix compiler pom config.", "fix references.", "fix table.", "fix stray entities.", "Make charsequences into strings, for safety.  Also fix a warning.", "fix classloading issue (no loading needed), and move forward on getting a wrapper class compiled.", "Bump source compatibility to 1.6 so we can use @Override annotations properly, and fix David's timezone.", "Add class subject, fix test verb to suit, etc.", "Fix integral is() so it works with other integral types without a cast to long.  In the words of D. Beaumont... ASSERT.that(4).is(4); should compile.", "Create Ordered interface for passing an 'inOrder()' fluent constraint on top of contains, as well as fixing a bug in iterablesubject, and add some tests.  Also, normalize list/iterables methods of comparison.", "Fix IterableSubject.contain() and add some tests for hasContents*Order()", "fixed message for duplicate missing elements", "narrow exception catching and test for the right error.", "Fix expected failure.", "Fix expected failure.", "Fix expected failure.", "Fix extension example to work with nextChain()", "Add chaining with the fix, using an And object to keep chaining english.", "Some renames and fix constants.", "Fix spacing.", "Fix error reporting verbage."], "metric": [["1", "4", "11", "2", "1", "2", "18", "0", "0", "0", "0", "0", "0", "0", "1", "2", "0", "0", "0", "0", "1", "1", "0", "2"], ["1", "2", "2", "2", "1", "2", "2", "2", "0", "0", "0", "0", "0", "0", "1", "0", "0", "2", "0", "0", "1", "0", "0", "2"], ["0", "0", "0", "0", "2", "2", "2", "0", "0", "0", "0", "0", "0", "0", "2", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "2", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["3", "5", "27", "22", "1", "8", "41", "11", "2", "2", "10", "0", "0", "0", "1", "1", "0", "1", "0", "0", "3", "1", "0", "4"], ["1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "2", "5", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "1", "0", "0", "0", "0", "0", "0", "1", "1", "3", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "3", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "2", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["10", "29", "171", "1", "3", "11", "223", "1", "2", "4", "8", "0", "0", "0", "3", "9", "0", "0", "0", "0", "10", "12", "0", "1"], ["1", "2", "10", "3", "1", "2", "14", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "2", "6", "6", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["0", "0", "0", "0", "2", "2", "5", "5", "0", "0", "0", "0", "0", "0", "2", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["10", "11", "0", "0", "3", "5", "0", "0", "0", "0", "0", "0", "0", "0", "3", "0", "0", "0", "0", "0", "10", "0", "0", "0"], ["3", "3", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "3", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "11", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "2", "21", "23", "23", "0", "0", "0", "0", "0", "0", "2", "0", "0", "20", "0", "0", "0", "0", "0", "0"], ["1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["2", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", "0", "0", "0"], ["1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["0", "0", "0", "0", "1", "1", "6", "6", "0", "0", "0", "0", "0", "0", "1", "0", "0", "2", "0", "0", "0", "0", "0", "0"], ["1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "1", "3", "3", "1", "1", "36", "0", "0", "0", "0", "0", "0", "0", "1", "2", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "1", "0", "0", "1"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "2", "4", "5", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "2", "1", "1", "1", "12", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["1", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["0", "0", "0", "0", "1", "2", "6", "10", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["2", "8", "29", "2", "2", "2", "12", "3", "0", "0", "0", "0", "0", "0", "2", "1", "0", "1", "0", "0", "2", "5", "0", "2"], ["1", "4", "14", "9", "1", "1", "19", "0", "0", "0", "0", "0", "0", "0", "1", "2", "0", "0", "0", "0", "1", "0", "0", "2"], ["1", "3", "10", "16", "1", "1", "14", "0", "0", "0", "0", "0", "0", "0", "1", "2", "0", "0", "0", "0", "1", "0", "2", "1"], ["3", "3", "15", "1", "2", "2", "23", "15", "0", "0", "0", "0", "1", "0", "1", "2", "2", "0", "0", "0", "3", "0", "0", "1"], ["1", "2", "5", "5", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "6", "7", "11", "11", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["15", "40", "5", "0", "0", "0", "0", "0", "1", "1", "1", "3", "0", "0", "0", "0", "0", "0", "0", "0", "15", "0", "0", "0"], ["2", "4", "36", "12", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", "2", "0", "5"], ["4", "6", "12", "8", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "4", "1", "0", "3"], ["0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "1", "4", "1", "1", "1", "7", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "0", "0", "1"], ["0", "0", "0", "0", "1", "1", "5", "2", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "6", "19", "16", "0", "0", "0", "0", "0", "0", "1", "0", "0", "9", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "1", "4", "1", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["2", "3", "30", "0", "1", "1", "16", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "1", "0", "1", "3", "0", "1"], ["1", "1", "2", "1", "1", "6", "54", "96", "0", "0", "0", "0", "0", "0", "1", "1", "1", "11", "0", "0", "1", "0", "0", "1"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["2", "4", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", "0", "0", "0"], ["1", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["1", "1", "8", "9", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "1", "0", "0", "1"], ["1", "1", "10", "7", "7", "18", "166", "162", "0", "0", "0", "0", "0", "0", "7", "4", "2", "11", "0", "0", "1", "0", "0", "1"], ["1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["1", "1", "3", "1", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "1", "0", "0", "1"], ["1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["1", "1", "2", "1", "4", "20", "124", "458", "0", "0", "0", "0", "0", "0", "4", "5", "26", "40", "0", "0", "1", "0", "0", "1"], ["1", "5", "25", "18", "1", "2", "17", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "2", "2", "4"], ["1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["1", "3", "16", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1"], ["1", "1", "2", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["6", "18", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "6", "0", "0", "6"], ["1", "1", "5", "0", "1", "1", "28", "0", "0", "0", "0", "0", "0", "0", "1", "2", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "5", "0", "1", "1", "43", "0", "0", "0", "0", "0", "0", "0", "1", "3", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "2", "6", "2", "1", "3", "6", "7", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "1", "0", "0", "1"], ["0", "0", "0", "0", "1", "4", "4", "3", "0", "0", "0", "0", "0", "0", "1", "0", "0", "4", "0", "0", "0", "0", "0", "0"], ["1", "2", "14", "15", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "2"], ["1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "2", "9", "5", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "2"], ["10", "36", "84", "78", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "10", "1", "1", "36"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "16", "137", "26", "2", "5", "77", "1", "2", "2", "12", "0", "0", "0", "2", "2", "0", "1", "0", "0", "1", "21", "8", "3"], ["1", "4", "9", "9", "1", "3", "5", "8", "0", "0", "0", "0", "0", "0", "1", "0", "0", "2", "0", "0", "1", "0", "0", "4"], ["1", "10", "34", "16", "1", "1", "32", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "8", "5", "2"], ["1", "4", "15", "14", "2", "3", "5", "3", "0", "0", "0", "0", "0", "0", "2", "0", "0", "3", "0", "0", "1", "0", "0", "2"], ["1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["1", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["5", "9", "9", "6", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "5", "0", "0", "4"], ["1", "7", "10", "5", "4", "4", "4", "4", "0", "0", "0", "0", "0", "0", "4", "0", "0", "4", "0", "0", "1", "0", "0", "3"], ["2", "3", "4", "5", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", "0", "0", "3"], ["1", "2", "21", "2", "1", "3", "51", "1", "0", "0", "0", "0", "0", "0", "1", "4", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "2", "19", "0", "1", "5", "20", "5", "0", "0", "0", "0", "0", "0", "1", "0", "0", "5", "0", "0", "1", "0", "0", "1"], ["2", "6", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", "0", "0", "2"], ["1", "1", "6", "2", "1", "1", "22", "0", "0", "0", "0", "0", "0", "0", "1", "2", "0", "0", "0", "0", "1", "0", "0", "2"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "2", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["2", "8", "61", "48", "2", "35", "765", "71", "0", "0", "0", "0", "0", "0", "2", "70", "8", "38", "0", "0", "2", "2", "0", "6"], ["2", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "2", "5", "35", "16", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["2", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", "0", "0", "0"], ["1", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["0", "0", "0", "0", "1", "1", "2", "2", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["1", "1", "5", "0", "1", "2", "83", "0", "0", "0", "0", "0", "0", "0", "1", "4", "0", "0", "0", "0", "1", "0", "0", "1"], ["2", "4", "28", "6", "2", "8", "152", "8", "0", "0", "0", "0", "0", "0", "2", "10", "0", "4", "0", "0", "2", "0", "0", "4"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "2", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "6", "12", "5", "0", "0", "0", "0", "0", "0", "1", "1", "0", "5", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "2", "5", "8", "357", "0", "0", "0", "0", "0", "1", "1", "8", "49", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "48", "13", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "2", "7", "27", "55", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "4", "20", "2", "1", "1", "50", "0", "0", "0", "0", "0", "1", "0", "0", "3", "0", "0", "0", "0", "1", "1", "0", "4"], ["1", "1", "1", "1", "1", "1", "6", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "0", "0", "0"], ["1", "3", "10", "2", "1", "1", "51", "0", "0", "0", "0", "0", "1", "0", "0", "3", "0", "0", "0", "0", "1", "0", "0", "3"], ["1", "1", "4", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0"], ["12", "22", "29", "30", "2", "5", "32", "51", "0", "0", "0", "0", "0", "0", "2", "1", "4", "1", "0", "0", "12", "0", "0", "19"], ["1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["9", "16", "11", "3", "5", "11", "19", "13", "0", "0", "0", "0", "0", "0", "5", "1", "0", "8", "0", "0", "9", "0", "0", "5"], ["1", "3", "17", "17", "1", "1", "7", "7", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "1", "0", "1", "3"], ["4", "4", "17", "7", "5", "10", "36", "11", "0", "0", "0", "0", "0", "0", "5", "2", "0", "9", "0", "0", "4", "0", "0", "4"], ["1", "2", "29", "0", "1", "1", "98", "0", "0", "0", "0", "0", "0", "0", "1", "7", "0", "0", "0", "0", "1", "1", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "3", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "1", "1", "6", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["1", "2", "2", "2", "3", "4", "25", "1", "0", "0", "0", "0", "0", "0", "3", "3", "0", "1", "0", "0", "1", "0", "0", "1"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "5", "7", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "2", "4", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "6", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "4", "10", "6", "1", "12", "78", "42", "0", "0", "0", "0", "0", "0", "1", "9", "1", "21", "0", "0", "1", "0", "0", "3"], ["1", "3", "4", "4", "2", "3", "3", "3", "0", "0", "0", "0", "0", "0", "2", "0", "0", "3", "0", "0", "1", "0", "0", "3"], ["0", "0", "0", "0", "1", "2", "2", "5", "0", "0", "0", "0", "0", "0", "1", "0", "0", "2", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "3", "5", "6", "0", "0", "0", "0", "0", "0", "1", "0", "0", "3", "0", "0", "0", "0", "0", "0"], ["1", "1", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "2", "11", "10", "1", "2", "34", "6", "0", "0", "0", "0", "0", "0", "1", "2", "0", "3", "0", "0", "1", "4", "4", "-1"], ["1", "3", "19", "24", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "1", "1"], ["1", "6", "44", "70", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "13", "0", "-3"], ["1", "1", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["2", "16", "149", "90", "3", "14", "359", "16", "0", "0", "0", "0", "0", "0", "3", "49", "2", "11", "0", "0", "2", "16", "3", "2"], ["1", "1", "1", "0", "0", "0", "0", "0", "5", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["1", "3", "4", "5", "4", "9", "17", "22", "1", "1", "1", "1", "0", "0", "4", "1", "1", "5", "0", "0", "1", "0", "0", "1"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["3", "7", "20", "8", "1", "1", "28", "0", "0", "0", "0", "0", "1", "0", "0", "3", "0", "0", "1", "0", "2", "3", "0", "3"], ["9", "16", "25", "17", "4", "6", "17", "6", "0", "0", "0", "0", "0", "0", "4", "1", "0", "3", "0", "0", "9", "1", "0", "5"], ["4", "8", "55", "49", "3", "7", "55", "22", "0", "0", "0", "0", "0", "0", "3", "13", "6", "0", "0", "0", "4", "5", "4", "2"], ["0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "2", "1", "2", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "2", "0", "0", "2", "3", "2", "3", "0", "0", "0", "0", "0", "0", "2", "0", "0", "1", "0", "0", "1", "0", "0", "0"], ["1", "3", "0", "0", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["1", "1", "1", "2", "1", "2", "9", "1", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1", "0", "0", "1", "0", "0", "1"], ["0", "0", "0", "0", "1", "1", "40", "0", "0", "0", "0", "0", "1", "0", "0", "6", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0"], ["1", "1", "24", "9", "1", "2", "33", "3", "0", "0", "0", "0", "0", "0", "1", "2", "0", "2", "0", "0", "1", "1", "0", "3"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "33", "355", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["3", "7", "41", "24", "0", "0", "0", "0", "1", "1", "2", "2", "0", "0", "0", "0", "0", "0", "0", "0", "3", "4", "0", "5"], ["2", "8", "25", "24", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", "1", "1", "9"], ["2", "4", "57", "19", "3", "11", "23", "11", "0", "0", "0", "0", "0", "0", "3", "1", "0", "10", "0", "0", "2", "7", "0", "6"], ["9", "17", "74", "25", "4", "8", "19", "15", "1", "1", "1", "1", "0", "0", "4", "0", "0", "4", "1", "0", "8", "5", "0", "3"], ["2", "4", "4", "4", "0", "0", "0", "0", "1", "1", "2", "2", "0", "0", "0", "0", "0", "0", "0", "0", "2", "0", "0", "2"], ["1", "3", "2", "2", "1", "4", "59", "39", "0", "0", "0", "0", "0", "0", "1", "4", "1", "6", "0", "0", "1", "0", "0", "1"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["2", "2", "52", "5", "0", "0", "0", "0", "1", "1", "5", "0", "0", "0", "0", "0", "0", "0", "1", "0", "1", "7", "0", "-1"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "2", "5", "5", "1", "2", "27", "0", "0", "0", "0", "0", "0", "0", "1", "3", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["1", "1", "6", "2", "1", "2", "8", "0", "0", "0", "0", "0", "0", "0", "1", "2", "0", "0", "0", "0", "1", "0", "0", "1"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "2", "2", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "25", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["5", "8", "148", "0", "0", "0", "0", "0", "4", "5", "22", "37", "0", "0", "0", "0", "0", "0", "3", "0", "2", "13", "0", "0"], ["1", "1", "2", "2", "1", "3", "7", "8", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "1", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["2", "2", "49", "34", "2", "9", "24", "24", "0", "0", "0", "0", "0", "0", "2", "14", "14", "0", "0", "0", "2", "1", "2", "1"], ["3", "8", "22", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "3", "1", "0", "2"], ["1", "2", "5", "4", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "5", "4", "7", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "5"], ["1", "1", "1", "0", "2", "3", "4", "2", "0", "0", "0", "0", "0", "0", "2", "0", "0", "1", "0", "0", "1", "0", "0", "1"], ["0", "0", "0", "0", "2", "4", "13", "5", "0", "0", "0", "0", "0", "0", "2", "4", "3", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "2", "22", "18", "0", "0", "0", "0", "0", "0", "1", "6", "3", "0", "0", "0", "0", "0", "0", "0"], ["4", "12", "12", "13", "8", "20", "106", "29", "0", "0", "0", "0", "0", "0", "8", "8", "1", "3", "0", "0", "4", "0", "1", "8"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "6", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "2", "3", "3", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "3", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "3", "3", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["1", "4", "6", "4", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "3"], ["3", "7", "35", "20", "1", "1", "1", "2", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "1", "0", "2", "1", "1", "1"], ["0", "0", "0", "0", "0", "0", "0", "0", "1", "2", "8", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["2", "4", "33", "11", "3", "4", "59", "1", "0", "0", "0", "0", "1", "0", "2", "6", "0", "1", "1", "0", "1", "2", "0", "2"], ["1", "9", "17", "6", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "3"], ["5", "19", "104", "50", "3", "13", "53", "48", "0", "0", "0", "0", "0", "0", "3", "21", "20", "2", "2", "0", "3", "4", "5", "6"], ["1", "1", "1", "1", "1", "1", "74", "0", "0", "0", "0", "0", "1", "0", "0", "9", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "2", "8", "6", "1", "1", "10", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "1", "10", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "1", "0", "0", "1"], ["0", "0", "0", "0", "1", "3", "9", "3", "0", "0", "0", "0", "0", "0", "1", "0", "0", "3", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "1", "4", "2", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "1", "6", "2", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["0", "0", "0", "0", "1", "2", "1", "2", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0"], ["6", "11", "39", "32", "5", "6", "18", "6", "0", "0", "0", "0", "0", "0", "5", "1", "0", "6", "1", "1", "4", "3", "2", "5"], ["1", "1", "14", "13", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "2", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"], ["1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1"]]}